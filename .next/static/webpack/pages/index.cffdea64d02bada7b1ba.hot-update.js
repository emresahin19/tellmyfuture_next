"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/build/astrochart.js":
/*!****************************************!*\
  !*** ./components/build/astrochart.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ buildChart; }\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\nfunction buildChart(data, colors) {\n  // ## Settings #############################\n  (function (astrology) {\n    //Scale of symbols\t \n    astrology.SYMBOL_SCALE = 1; // BG color\n\n    astrology.COLOR_BACKGROUND = colors.background; // Color of planet's symbols\n\n    astrology.POINTS_COLOR = colors.points; // Size of description text next to the planet: angle, retrograde, dignities, ...\n\n    astrology.POINTS_TEXT_SIZE = 8; // Points strength of lines\n\n    astrology.POINTS_STROKE = 1.8; // Font color of signs symbols\n\n    astrology.SIGNS_COLOR = colors.sign; // Signs strength of lines\n\n    astrology.SIGNS_STROKE = 1.5; // Chart margin\n\n    astrology.MARGIN = 50; //px\n    // Chart Padding  \n\n    astrology.PADDING = 18; //px\n    // Module wrapper element ID\n\n    astrology.ID_CHART = \"astrology\"; // Radix chart element ID\n\n    astrology.ID_RADIX = \"radix\"; // Transit chart element ID\n\n    astrology.ID_TRANSIT = \"transit\"; // Aspects wrapper element ID\n\n    astrology.ID_ASPECTS = \"aspects\"; // Aspects wrapper element ID\n\n    astrology.ID_POINTS = \"planets\"; // Signs wrapper element ID\n\n    astrology.ID_SIGNS = \"signs\"; // Circles wrapper element ID\n\n    astrology.ID_CIRCLES = \"circles\"; // Axis wrapper element ID\n\n    astrology.ID_AXIS = \"axis\"; // Cusps wrapper element ID\n\n    astrology.ID_CUSPS = \"cusps\"; // Cusps wrapper element ID\n\n    astrology.ID_RULER = \"ruler\"; // Background wrapper element ID\n\n    astrology.ID_BG = \"bg\"; // Color of circles in charts\n\n    astrology.CIRCLE_COLOR = colors.circle; // Circles strength of lines\n\n    astrology.CIRCLE_STRONG = 2; // Color of lines in charts\n\n    astrology.LINE_COLOR = colors.line; // radius / INDOOR_CIRCLE_RADIUS_RATIO\n\n    astrology.INDOOR_CIRCLE_RADIUS_RATIO = 2; // radius - radius/INNER_CIRCLE_RADIUS_RATIO\n\n    astrology.INNER_CIRCLE_RADIUS_RATIO = 8; // ( radius / astrology.INNER_CIRCLE_RADIUS_RATIO ) / astrology.RULER_RADIUS \n\n    astrology.RULER_RADIUS = 4; // Points\n\n    astrology.SYMBOL_SUN = \"Sun\";\n    astrology.SYMBOL_MOON = \"Moon\";\n    astrology.SYMBOL_MERCURY = \"Mercury\";\n    astrology.SYMBOL_VENUS = \"Venus\";\n    astrology.SYMBOL_MARS = \"Mars\";\n    astrology.SYMBOL_JUPITER = \"Jupiter\";\n    astrology.SYMBOL_SATURN = \"Saturn\";\n    astrology.SYMBOL_URANUS = \"Uranus\";\n    astrology.SYMBOL_NEPTUNE = \"Neptune\";\n    astrology.SYMBOL_PLUTO = \"Pluto\";\n    astrology.SYMBOL_CHIRON = \"Chiron\";\n    astrology.SYMBOL_LILITH = \"Lilith\";\n    astrology.SYMBOL_NNODE = \"NNode\"; // Axis\n\n    astrology.SYMBOL_AS = \"As\";\n    astrology.SYMBOL_DS = \"Ds\";\n    astrology.SYMBOL_MC = \"Mc\";\n    astrology.SYMBOL_IC = \"Ic\";\n    astrology.SYMBOL_AXIS_FONT_COLOR = colors.axis;\n    astrology.SYMBOL_AXIS_STROKE = 1.6; // Cusps\n\n    astrology.SYMBOL_CUSP_1 = \"1\";\n    astrology.SYMBOL_CUSP_2 = \"2\";\n    astrology.SYMBOL_CUSP_3 = \"3\";\n    astrology.SYMBOL_CUSP_4 = \"4\";\n    astrology.SYMBOL_CUSP_5 = \"5\";\n    astrology.SYMBOL_CUSP_6 = \"6\";\n    astrology.SYMBOL_CUSP_7 = \"7\";\n    astrology.SYMBOL_CUSP_8 = \"8\";\n    astrology.SYMBOL_CUSP_9 = \"9\";\n    astrology.SYMBOL_CUSP_10 = \"10\";\n    astrology.SYMBOL_CUSP_11 = \"11\";\n    astrology.SYMBOL_CUSP_12 = \"12\"; // Cusps strength of lines\n\n    astrology.CUSPS_STROKE = 1;\n    astrology.CUSPS_FONT_COLOR = colors.cusps; //Signs\n\n    astrology.SYMBOL_ARIES = \"Aries\";\n    astrology.SYMBOL_TAURUS = \"Taurus\";\n    astrology.SYMBOL_GEMINI = \"Gemini\";\n    astrology.SYMBOL_CANCER = \"Cancer\";\n    astrology.SYMBOL_LEO = \"Leo\";\n    astrology.SYMBOL_VIRGO = \"Virgo\";\n    astrology.SYMBOL_LIBRA = \"Libra\";\n    astrology.SYMBOL_SCORPIO = \"Scorpio\";\n    astrology.SYMBOL_SAGITTARIUS = \"Sagittarius\";\n    astrology.SYMBOL_CAPRICORN = \"Capricorn\";\n    astrology.SYMBOL_AQUARIUS = \"Aquarius\";\n    astrology.SYMBOL_PISCES = \"Pisces\";\n    astrology.SYMBOL_SIGNS = [astrology.SYMBOL_ARIES, astrology.SYMBOL_TAURUS, astrology.SYMBOL_GEMINI, astrology.SYMBOL_CANCER, astrology.SYMBOL_LEO, astrology.SYMBOL_VIRGO, astrology.SYMBOL_LIBRA, astrology.SYMBOL_SCORPIO, astrology.SYMBOL_SAGITTARIUS, astrology.SYMBOL_CAPRICORN, astrology.SYMBOL_AQUARIUS, astrology.SYMBOL_PISCES]; // http://www.rapidtables.com/web/color/html-color-codes.htm\n\n    astrology.COLOR_ARIES = colors.fire;\n    astrology.COLOR_TAURUS = colors.earth;\n    astrology.COLOR_GEMINI = colors.air;\n    astrology.COLOR_CANCER = colors.water;\n    astrology.COLOR_LEO = colors.fire;\n    astrology.COLOR_VIRGO = colors.earth;\n    astrology.COLOR_LIBRA = colors.air;\n    astrology.COLOR_SCORPIO = colors.water;\n    astrology.COLOR_SAGITTARIUS = colors.fire;\n    astrology.COLOR_CAPRICORN = colors.earth;\n    astrology.COLOR_AQUARIUS = colors.air;\n    astrology.COLOR_PISCES = colors.water;\n    astrology.COLORS_SIGNS = [astrology.COLOR_ARIES, astrology.COLOR_TAURUS, astrology.COLOR_GEMINI, astrology.COLOR_CANCER, astrology.COLOR_LEO, astrology.COLOR_VIRGO, astrology.COLOR_LIBRA, astrology.COLOR_SCORPIO, astrology.COLOR_SAGITTARIUS, astrology.COLOR_CAPRICORN, astrology.COLOR_AQUARIUS, astrology.COLOR_PISCES]; // 0 degree is on the West \n\n    astrology.SHIFT_IN_DEGREES = 180; // No fill, only stroke\n\n    astrology.STROKE_ONLY = false; // Planets collision circle radius for astrology.SYMBOL_SCALE = 1\n    // Scaling changes the collision radius \n\n    astrology.COLLISION_RADIUS = 10; //px\n    // Aspects\t\n\n    astrology.ASPECTS = {\n      \"conjunction\": {\n        \"degree\": 0,\n        \"orbit\": 10,\n        \"color\": colors.fire\n      },\n      //transparent\n      \"square\": {\n        \"degree\": 90,\n        \"orbit\": 8,\n        \"color\": colors.fire\n      },\n      //fire\n      \"trine\": {\n        \"degree\": 120,\n        \"orbit\": 8,\n        \"color\": colors.air\n      },\n      //water\n      \"opposition\": {\n        \"degree\": 180,\n        \"orbit\": 10,\n        \"color\": colors.air\n      } //water\n\n    }; // Dignities\n\n    astrology.DIGNITIES_RULERSHIP = \"r\";\n    astrology.DIGNITIES_DETRIMENT = \"d\";\n    astrology.DIGNITIES_EXALTATION = \"e\";\n    astrology.DIGNITIES_EXACT_EXALTATION = \"E\";\n    astrology.DIGNITIES_FALL = \"f\"; // Source: Aleister Crowley\n\n    astrology.DIGNITIES_EXACT_EXALTATION_DEFAULT = [{\n      \"name\": \"Sun\",\n      \"position\": 19,\n      \"orbit\": 2\n    }, // 19 Arise\n    {\n      \"name\": \"Moon\",\n      \"position\": 33,\n      \"orbit\": 2\n    }, //3 Taurus\n    {\n      \"name\": \"Mercury\",\n      \"position\": 155,\n      \"orbit\": 2\n    }, //15 Virgo\n    {\n      \"name\": \"Venus\",\n      \"position\": 357,\n      \"orbit\": 2\n    }, //27 Pisces\n    {\n      \"name\": \"Mars\",\n      \"position\": 298,\n      \"orbit\": 2\n    }, //28 Capricorn\n    {\n      \"name\": \"Jupiter\",\n      \"position\": 105,\n      \"orbit\": 2\n    }, //15 Cancer\n    {\n      \"name\": \"Saturn\",\n      \"position\": 201,\n      \"orbit\": 2\n    }, //21 Libra\n    {\n      \"name\": \"NNode\",\n      \"position\": 63,\n      \"orbit\": 2\n    } //3 Geminy\n    ]; // 0 - 4\n\n    astrology.ANIMATION_CUSPS_ROTATION_SPEED = 2;\n    astrology.DEBUG = false;\n  })(window.astrology = window.astrology || {}); // ## SVG #####################\n\n\n  (function (astrology) {\n    var context;\n    /**\n     * SVG tools.\n     * \n     * @class\n     * @public\n     * @constructor\n     * @param {String} elementId - root DOM Element \n     * @param {int} width\n     * @param {int} height \n     */\n\n    astrology.SVG = function (elementId, width, height) {\n      var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n      svg.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n      svg.setAttribute('style', \"position: relative; overflow: hidden;\");\n      svg.setAttribute('version', \"1.1\");\n      svg.setAttribute('width', '50%');\n      svg.setAttribute('height', '50%');\n      svg.setAttribute('viewBox', \"0 0 \" + width + \" \" + height);\n      document.getElementById(elementId).appendChild(svg);\n      astrology._paperElementId = elementId + \"-\" + astrology.ID_CHART;\n      var wrapper = document.createElementNS(svg.namespaceURI, \"g\");\n      wrapper.setAttribute('id', astrology._paperElementId);\n      svg.appendChild(wrapper);\n      this.DOMElement = svg;\n      this.root = wrapper;\n      this.width = width;\n      this.height = height;\n      context = this;\n    };\n    /**\n     * Get a required symbol. \n     * \n     * @param {String} name\n     * @param {int} x\n     * @param {int} y\n     * \n     * @return {SVG g}\n     */\n\n\n    astrology.SVG.prototype.getSymbol = function (name, x, y) {\n      switch (name) {\n        case astrology.SYMBOL_SUN:\n          return sun(x, y);\n          break;\n\n        case astrology.SYMBOL_MOON:\n          return moon(x, y);\n          break;\n\n        case astrology.SYMBOL_MERCURY:\n          return mercury(x, y);\n          break;\n\n        case astrology.SYMBOL_VENUS:\n          return venus(x, y);\n          break;\n\n        case astrology.SYMBOL_MARS:\n          return mars(x, y);\n          break;\n\n        case astrology.SYMBOL_JUPITER:\n          return jupiter(x, y);\n          break;\n\n        case astrology.SYMBOL_SATURN:\n          return saturn(x, y);\n          break;\n\n        case astrology.SYMBOL_URANUS:\n          return uranus(x, y);\n          break;\n\n        case astrology.SYMBOL_NEPTUNE:\n          return neptune(x, y);\n          break;\n\n        case astrology.SYMBOL_PLUTO:\n          return pluto(x, y);\n          break;\n\n        case astrology.SYMBOL_CHIRON:\n          return chiron(x, y);\n          break;\n\n        case astrology.SYMBOL_LILITH:\n          return lilith(x, y);\n          break;\n\n        case astrology.SYMBOL_NNODE:\n          return nnode(x, y);\n          break;\n\n        case astrology.SYMBOL_ARIES:\n          return aries(x, y);\n          break;\n\n        case astrology.SYMBOL_TAURUS:\n          return taurus(x, y);\n          break;\n\n        case astrology.SYMBOL_GEMINI:\n          return gemini(x, y);\n          break;\n\n        case astrology.SYMBOL_CANCER:\n          return cancer(x, y);\n          break;\n\n        case astrology.SYMBOL_LEO:\n          return leo(x, y);\n          break;\n\n        case astrology.SYMBOL_VIRGO:\n          return virgo(x, y);\n          break;\n\n        case astrology.SYMBOL_LIBRA:\n          return libra(x, y);\n          break;\n\n        case astrology.SYMBOL_SCORPIO:\n          return scorpio(x, y);\n          break;\n\n        case astrology.SYMBOL_SAGITTARIUS:\n          return sagittarius(x, y);\n          break;\n\n        case astrology.SYMBOL_CAPRICORN:\n          return capricorn(x, y);\n          break;\n\n        case astrology.SYMBOL_AQUARIUS:\n          return aquarius(x, y);\n          break;\n\n        case astrology.SYMBOL_PISCES:\n          return pisces(x, y);\n          break;\n\n        case astrology.SYMBOL_AS:\n          return ascendant(x, y);\n          break;\n\n        case astrology.SYMBOL_DS:\n          return descendant(x, y);\n          break;\n\n        case astrology.SYMBOL_MC:\n          return mediumCoeli(x, y);\n          break;\n\n        case astrology.SYMBOL_IC:\n          return immumCoeli(x, y);\n          break;\n\n        case astrology.SYMBOL_IC:\n          return immumCoeli(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_1:\n          return number1(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_2:\n          return number2(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_3:\n          return number3(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_4:\n          return number4(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_5:\n          return number5(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_6:\n          return number6(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_7:\n          return number7(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_8:\n          return number8(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_9:\n          return number9(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_10:\n          return number10(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_11:\n          return number11(x, y);\n          break;\n\n        case astrology.SYMBOL_CUSP_12:\n          return number12(x, y);\n          break;\n\n        default:\n          var unknownPoint = this.circle(x, y, 8);\n          unknownPoint.setAttribute(\"stroke\", \"#ffff00\");\n          unknownPoint.setAttribute(\"stroke-width\", 1);\n          unknownPoint.setAttribute(\"fill\", \"#ff0000\");\n          return unknownPoint;\n      }\n    };\n    /**\n     * Get ID for sign wrapper. \n     * \n     * @param {String} sign\n     * \n     * @return {String id}\n     */\n\n\n    function getSignWrapperId(sign) {\n      return astrology._paperElementId + '-' + astrology.ID_RADIX + '-' + astrology.ID_SIGNS + '-' + sign;\n    }\n    /**\n     * Get ID for house wrapper. \n     * \n     * @param {String} house\n     * \n     * @return {String id}\n     */\n\n\n    function getHouseIdWrapper(house) {\n      return astrology._paperElementId + '-' + astrology.ID_RADIX + '-' + astrology.ID_CUSPS + '-' + house;\n    }\n    /*\n     * Sun path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVG g}\n     */\n\n\n    function sun(x, y) {\n      // center symbol\n      var xShift = -1; //px\t\t\t\t\t\t\n\n      var yShift = -8; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -2.18182,0.727268 -2.181819,1.454543 -1.454552,2.18182 -0.727268,2.181819 0,2.181819 0.727268,2.181819 1.454552,2.18182 2.181819,1.454544 2.18182,0.727276 2.18181,0 2.18182,-0.727276 2.181819,-1.454544 1.454552,-2.18182 0.727268,-2.181819 0,-2.181819 -0.727268,-2.181819 -1.454552,-2.18182 -2.181819,-1.454543 -2.18182,-0.727268 -2.18181,0 m 0.727267,6.54545 -0.727267,0.727276 0,0.727275 0.727267,0.727268 0.727276,0 0.727267,-0.727268 0,-0.727275 -0.727267,-0.727276 -0.727276,0 m 0,0.727276 0,0.727275 0.727276,0 0,-0.727275 -0.727276,0\");\n      node.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Moon path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function moon(x, y) {\n      // center symbol\n      var xShift = -2; //px\t\t\t\t\t\t\n\n      var yShift = -7; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" a 7.4969283,7.4969283 0 0 1 0,14.327462 7.4969283,7.4969283 0 1 0 0,-14.327462 z\");\n      node.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Mercury path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function mercury(x, y) {\n      // center symbol\n      var xShift = -2; //px\t\t\t\t\t\t\n\n      var yShift = 7; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var body = document.createElementNS(context.root.namespaceURI, \"path\");\n      body.setAttribute(\"d\", \"m\" + x + \", \" + y + \" 4.26011,0 m -2.13005,-2.98207 0,5.11213 m 4.70312,-9.7983 a 4.70315,4.70315 0 0 1 -4.70315,4.70314 4.70315,4.70315 0 0 1 -4.70314,-4.70314 4.70315,4.70315 0 0 1 4.70314,-4.70315 4.70315,4.70315 0 0 1 4.70315,4.70315 z\");\n      body.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      body.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      body.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(body);\n      var crownXShift = 6; //px\t\t\t\t\t\t\n\n      var crownYShift = -16; //px\n\n      var crown = document.createElementNS(context.root.namespaceURI, \"path\");\n      crown.setAttribute(\"d\", \"m\" + (x + crownXShift) + \", \" + (y + crownYShift) + \" a 3.9717855,3.9717855 0 0 1 -3.95541,3.59054 3.9717855,3.9717855 0 0 1 -3.95185,-3.59445\");\n      crown.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      crown.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      crown.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(crown);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Venus path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function venus(x, y) {\n      // center symbol\n      var xShift = 2; //px\t\t\t\t\t\t\n\n      var yShift = 7; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -4.937669,0.03973 m 2.448972,2.364607 0,-5.79014 c -3.109546,-0.0085 -5.624617,-2.534212 -5.620187,-5.64208 0.0044,-3.107706 2.526514,-5.621689 5.635582,-5.621689 3.109068,0 5.631152,2.513983 5.635582,5.621689 0.0044,3.107868 -2.510641,5.633586 -5.620187,5.64208\");\n      node.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Mars path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function mars(x, y) {\n      // center symbol\n      var xShift = 2; //px\t\t\t\t\t\t\n\n      var yShift = -2; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" c -5.247438,-4.150623 -11.6993,3.205518 -7.018807,7.886007 4.680494,4.680488 12.036628,-1.771382 7.885999,-7.018816 z m 0,0 0.433597,0.433595 3.996566,-4.217419 m -3.239802,-0.05521 3.295015,0 0.110427,3.681507\");\n      node.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Jupiter path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function jupiter(x, y) {\n      // center symbol\n      var xShift = -5; //px\t\t\t\t\t\t\n\n      var yShift = -2; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" c -0.43473,0 -1.30422,-0.40572 -1.30422,-2.02857 0,-1.62285 1.73897,-3.2457 3.47792,-3.2457 1.73897,0 3.47792,1.21715 3.47792,4.05713 0,2.83999 -2.1737,7.30283 -6.52108,7.30283 m 12.17269,0 -12.60745,0 m 9.99902,-11.76567 0,15.82279\");\n      node.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Saturn path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function saturn(x, y) {\n      // center symbol\n      var xShift = 5; //px\t\t\t\t\t\t\n\n      var yShift = 10; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" c -0.52222,0.52221 -1.04445,1.04444 -1.56666,1.04444 -0.52222,0 -1.56667,-0.52223 -1.56667,-1.56667 0,-1.04443 0.52223,-2.08887 1.56667,-3.13332 1.04444,-1.04443 2.08888,-3.13331 2.08888,-5.22219 0,-2.08888 -1.04444,-4.17776 -3.13332,-4.17776 -1.97566,0 -3.65555,1.04444 -4.69998,3.13333 m -2.55515,-5.87499 6.26664,0 m -3.71149,-2.48054 0,15.14438\");\n      node.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Uranus path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function uranus(x, y) {\n      // center symbol\n      var xShift = -5; //px\t\t\t\t\t\t\n\n      var yShift = -7; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var horns = document.createElementNS(context.root.namespaceURI, \"path\");\n      horns.setAttribute(\"d\", \"m\" + x + \", \" + y + \"  0,10.23824 m 10.23633,-10.32764 0,10.23824 m -10.26606,-4.6394 10.23085,0 m -5.06415,-5.51532 0,11.94985\");\n      horns.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      horns.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      horns.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(horns);\n      var bodyXShift = 7; //px\t\t\t\t\t\t\n\n      var bodyYShift = 14.5; //px\n\n      var body = document.createElementNS(context.root.namespaceURI, \"path\");\n      body.setAttribute(\"d\", \"m\" + (x + bodyXShift) + \", \" + (y + bodyYShift) + \" a 1.8384377,1.8384377 0 0 1 -1.83844,1.83843 1.8384377,1.8384377 0 0 1 -1.83842,-1.83843 1.8384377,1.8384377 0 0 1 1.83842,-1.83844 1.8384377,1.8384377 0 0 1 1.83844,1.83844 z\");\n      body.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      body.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      body.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(body);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Neptune path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function neptune(x, y) {\n      // center symbol\n      var xShift = 3; //px\t\t\t\t\t\t\n\n      var yShift = -5; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" 1.77059,-2.36312 2.31872,1.8045 m -14.44264,-0.20006 2.34113,-1.77418 1.74085,2.38595 m -1.80013,-1.77265 c -1.23776,8.40975 0.82518,9.67121 4.95106,9.67121 4.12589,0 6.18883,-1.26146 4.95107,-9.67121 m -7.05334,3.17005 2.03997,-2.12559 2.08565,2.07903 m -5.32406,9.91162 6.60142,0 m -3.30071,-12.19414 0,15.55803\");\n      node.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Pluto path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function pluto(x, y) {\n      // center symbol\n      var xShift = 5; //px\t\t\t\t\t\t\n\n      var yShift = -5; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var body = document.createElementNS(context.root.namespaceURI, \"path\");\n      body.setAttribute(\"d\", \"m\" + x + \", \" + y + \" a 5.7676856,5.7676856 0 0 1 -2.88385,4.99496 5.7676856,5.7676856 0 0 1 -5.76768,0 5.7676856,5.7676856 0 0 1 -2.88385,-4.99496 m 5.76771,13.93858 0,-8.17088 m -3.84512,4.32576 7.69024,0\");\n      body.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      body.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      body.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(body);\n      var headXShift = -2.3; //px\t\t\t\t\t\t\n\n      var headYShift = 0; //px\n\n      var head = document.createElementNS(context.root.namespaceURI, \"path\");\n      head.setAttribute(\"d\", \"m\" + (x + headXShift) + \", \" + (y + headYShift) + \" a 3.3644834,3.3644834 0 0 1 -3.36448,3.36449 3.3644834,3.3644834 0 0 1 -3.36448,-3.36449 3.3644834,3.3644834 0 0 1 3.36448,-3.36448 3.3644834,3.3644834 0 0 1 3.36448,3.36448 z\");\n      head.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      head.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      head.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(head);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Chiron path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function chiron(x, y) {\n      // center symbol\n      var xShift = 3; //px\t\t\t\t\t\t\n\n      var yShift = 5; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var body = document.createElementNS(context.root.namespaceURI, \"path\");\n      body.setAttribute(\"d\", \"m\" + x + \", \" + y + \" a 3.8764725,3.0675249 0 0 1 -3.876473,3.067525 3.8764725,3.0675249 0 0 1 -3.876472,-3.067525 3.8764725,3.0675249 0 0 1 3.876472,-3.067525 3.8764725,3.0675249 0 0 1 3.876473,3.067525 z\");\n      body.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      body.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      body.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(body);\n      var headXShift = 0; //px\t\t\t\t\t\t\n\n      var headYShift = -13; //px\n\n      var head = document.createElementNS(context.root.namespaceURI, \"path\");\n      head.setAttribute(\"d\", \"m\" + (x + headXShift) + \", \" + (y + headYShift) + \"   -3.942997,4.243844 4.110849,3.656151 m -4.867569,-9.009468 0,11.727251\");\n      head.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      head.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      head.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(head);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Lilith path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function lilith(x, y) {\n      // center symbol\n      var xShift = 2; //px\t\t\t\t\t\t\n\n      var yShift = 4; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -2.525435,-1.12853 -1.464752,-1.79539 -0.808138,-2.20576 0.151526,-2.05188 0.909156,-1.5389 1.010173,-1.02593 0.909157,-0.56427 1.363735,-0.61556 m 2.315327,-0.39055 -1.716301,0.54716 -1.7163,1.09431 -1.1442,1.64146 -0.572102,1.64146 0,1.64146 0.572102,1.64147 1.1442,1.64145 1.7163,1.09432 1.716301,0.54715 m 0,-11.49024 -2.2884,0 -2.288401,0.54716 -1.716302,1.09431 -1.144201,1.64146 -0.5721,1.64146 0,1.64146 0.5721,1.64147 1.144201,1.64145 1.716302,1.09432 2.288401,0.54715 2.2884,0 m -4.36712,-0.4752 0,6.44307 m -2.709107,-3.41101 5.616025,0\");\n      node.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * NNode path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function nnode(x, y) {\n      // center symbol\n      var xShift = -2; //px\t\t\t\t\t\t\n\n      var yShift = 3; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -1.3333334,-0.6666667 -0.6666666,0 -1.3333334,0.6666667 -0.6666667,1.3333333 0,0.6666667 0.6666667,1.3333333 1.3333334,0.6666667 0.6666666,0 1.3333334,-0.6666667 0.6666666,-1.3333333 0,-0.6666667 -0.6666666,-1.3333333 -2,-2.66666665 -0.6666667,-1.99999995 0,-1.3333334 0.6666667,-2 1.3333333,-1.3333333 2,-0.6666667 2.6666666,0 2,0.6666667 1.3333333,1.3333333 0.6666667,2 0,1.3333334 -0.6666667,1.99999995 -2,2.66666665 -0.6666666,1.3333333 0,0.6666667 0.6666666,1.3333333 1.3333334,0.6666667 0.6666666,0 1.3333334,-0.6666667 0.6666667,-1.3333333 0,-0.6666667 -0.6666667,-1.3333333 -1.3333334,-0.6666667 -0.6666666,0 -1.3333334,0.6666667 m -7.9999999,-6 0.6666667,-1.3333333 1.3333333,-1.3333333 2,-0.6666667 2.6666666,0 2,0.6666667 1.3333333,1.3333333 0.6666667,1.3333333\");\n      node.setAttribute(\"stroke\", astrology.POINTS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.POINTS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Aries symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function aries(x, y) {\n      // center symbol\n      var xShift = -9; //px\t\t\t\t\t\t\n\n      var yShift = -2; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_ARIES));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" -0.9,-0.9 0,-1.8 0.9,-1.8 1.8,-0.8999998 1.8,0 1.8,0.8999998 0.9,0.9 0.9,1.8 0.9,4.5 m -9,-5.4 1.8,-1.8 1.8,0 1.8,0.9 0.9,0.9 0.9,1.8 0.9,3.6 0,9.9 m 8.1,-12.6 0.9,-0.9 0,-1.8 -0.9,-1.8 -1.8,-0.8999998 -1.8,0 -1.8,0.8999998 -0.9,0.9 -0.9,1.8 -0.9,4.5 m 9,-5.4 -1.8,-1.8 -1.8,0 -1.8,0.9 -0.9,0.9 -0.9,1.8 -0.9,3.6 0,9.9\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Taurus symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function taurus(x, y) {\n      // center symbol\n      var xShift = -9; //px\t\t\t\t\t\t\n\n      var yShift = -11; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_TAURUS));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" 1,4 1,2 2,2 3,1 4,0 3,-1 2,-2 1,-2 1,-4 m -18,0 1,3 1,2 2,2 3,1 4,0 3,-1 2,-2 1,-2 1,-3 m -11,8 -2,1 -1,1 -1,2 0,3 1,2 2,2 2,1 2,0 2,-1 2,-2 1,-2 0,-3 -1,-2 -1,-1 -2,-1 m -4,1 -2,1 -1,2 0,3 1,3 m 8,0 1,-3 0,-3 -1,-2 -2,-1\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Gemini symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function gemini(x, y) {\n      // center symbol\n      var xShift = -6; //px\t\t\t\t\t\t\n\n      var yShift = -6; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_GEMINI));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" 0,11.546414 m 0.9622011,-10.5842129 0,9.6220117 m 7.6976097,-9.6220117 0,9.6220117 m 0.962201,-10.5842128 0,11.546414 m -13.4708165,-14.4330172 1.9244023,1.924402 1.9244024,0.9622012 2.8866038,0.9622011 3.848804,0 2.886604,-0.9622011 1.924402,-0.9622012 1.924403,-1.924402 m -17.3196215,17.3196207 1.9244023,-1.9244024 1.9244024,-0.9622011 2.8866038,-0.9622012 3.848804,0 2.886604,0.9622012 1.924402,0.9622011 1.924403,1.9244024\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Cancer symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function cancer(x, y) {\n      // center symbol\n      var xShift = 9; //px\t\t\t\t\t\t\n\n      var yShift = -9; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_CANCER));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" -15,0 -2,1 -1,2 0,2 1,2 2,1 2,0 2,-1 1,-2 0,-2 -1,-2 11,0 m -18,3 1,2 1,1 2,1 m 4,-4 -1,-2 -1,-1 -2,-1 m -4,15 15,0 2,-1 1,-2 0,-2 -1,-2 -2,-1 -2,0 -2,1 -1,2 0,2 1,2 -11,0 m 18,-3 -1,-2 -1,-1 -2,-1 m -4,4 1,2 1,1 2,1\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Leo symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function leo(x, y) {\n      // center symbol\n      var xShift = -3; //px\t\t\t\t\t\t\n\n      var yShift = 4; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_LEO));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" -2,-1 -1,0 -2,1 -1,2 0,1 1,2 2,1 1,0 2,-1 1,-2 0,-1 -1,-2 -5,-5 -1,-2 0,-3 1,-2 2,-1 3,-1 4,0 4,1 2,2 1,2 0,3 -1,3 -3,3 -1,2 0,2 1,2 2,0 1,-1 1,-2 m -13,-5 -2,-3 -1,-2 0,-3 1,-2 1,-1 m 7,-1 3,1 2,2 1,2 0,3 -1,3 -2,3\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Virgo symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function virgo(x, y) {\n      // center symbol\n      var xShift = -9; //px\t\t\t\t\t\t\n\n      var yShift = -5; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_VIRGO));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" 2.5894868,-2.5894868 1.7263245,2.5894868 0,9.4947847 m -2.5894868,-11.2211092 1.7263245,2.5894867 0,8.6316225 m 0.8631623,-9.4947847 2.5894867,-2.5894868 1.72632451,2.5894868 0,8.6316224 m -2.58948671,-10.3579469 1.72632447,2.5894867 0,7.7684602 m 0.86316224,-8.6316224 2.58948679,-2.5894868 1.7263244,2.5894868 0,13.8105959 m -2.5894867,-15.5369204 1.7263245,2.5894867 0,12.9474337 m 0.8631622,-13.8105959 2.5894868,-2.5894868 0.8631622,1.7263245 0.8631623,2.5894868 0,2.5894867 -0.8631623,2.58948673 -0.8631622,1.72632447 -1.7263245,1.7263245 -2.5894867,1.7263245 -4.3158113,1.7263245 m 7.7684602,-15.5369204 0.8631623,0.8631622 0.8631622,2.5894868 0,2.5894867 -0.8631622,2.58948673 -0.8631623,1.72632447 -1.7263245,1.7263245 -2.5894867,1.7263245 -3.452649,1.7263245\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Libra symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function libra(x, y) {\n      // center symbol\n      var xShift = -2; //px\t\t\t\t\t\t\n\n      var yShift = -8; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_LIBRA));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" c 0.7519,1e-5 1.3924,0.12227 1.9316,0.35156 0.6619,0.28495 1.2134,0.63854 1.666,1.0625 0.4838,0.45481 0.853,0.97255 1.1172,1.56641 0.2467,0.56612 0.3711,1.17397 0.3711,1.83789 0,0.64113 -0.1244,1.23948 -0.373,1.80859 -0.1624,0.36305 -0.3631,0.69725 -0.6055,1.00586 l -0.6367,0.8086 4.3789,0 0,0.67187 -5.4024,0 0,-0.91797 c 0.2173,-0.1385 0.4379,-0.27244 0.6367,-0.44726 0.4215,-0.36876 0.7529,-0.82784 0.9883,-1.35547 0.2215,-0.50074 0.334,-1.0358 0.334,-1.58594 0,-0.55653 -0.1122,-1.09434 -0.334,-1.5957 l -0,-0.002 0,-0.004 c -0.2292,-0.49901 -0.5581,-0.94778 -0.9746,-1.33789 l -0,-0.002 -0,-0.002 c -0.3967,-0.36155 -0.8679,-0.65723 -1.4062,-0.88476 l -0,0 c -0.4984,-0.20903 -1.0622,-0.30663 -1.6817,-0.30664 -0.5926,1e-5 -1.1526,0.10008 -1.6699,0.30273 l -0,0 c -0.5261,0.20799 -1.0032,0.5067 -1.4199,0.88867 l -0,0.002 -0,0.002 c -0.4166,0.39011 -0.7454,0.83887 -0.9746,1.33789 l 0,0.004 -0,0.002 c -0.2218,0.50136 -0.334,1.03915 -0.334,1.5957 0,0.55015 0.1125,1.08519 0.334,1.58594 l 0,0.002 0,0.004 c 0.229,0.49855 0.5574,0.94911 0.9746,1.33984 0.1876,0.17482 0.4143,0.31484 0.6367,0.45703 l 0,0.91797 -5.3906,0 0,-0.67187 4.3789,0 -0.6367,-0.8086 c -0.2428,-0.30904 -0.443,-0.64418 -0.6055,-1.00781 -0.2487,-0.56911 -0.3731,-1.16552 -0.3731,-1.80664 0,-0.66391 0.1244,-1.27178 0.3711,-1.83789 l 0,-0.002 c 3e-4,-5.8e-4 -2e-4,-10e-4 0,-0.002 0.2641,-0.59218 0.6326,-1.10871 1.1153,-1.5625 0.4847,-0.45571 1.0332,-0.80585 1.6562,-1.05859 0.5861,-0.23488 1.2294,-0.35546 1.9414,-0.35547 z m -7.8496,13.45899 15.6992,0 0,0.67187 -15.6992,0 z\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Scorpio symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function scorpio(x, y) {\n      // center symbol\n      var xShift = -9; //px\t\t\t\t\t\t\n\n      var yShift = -4; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_SCORPIO));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" 2.3781101,-2.3781101 2.3781101,2.3781101 0,9.5124404 m -3.1708135,-11.0978471 2.3781101,2.3781101 0,8.719737 m 0.7927034,-9.5124404 2.3781101,-2.3781101 2.37811007,2.3781101 0,9.5124404 m -3.17081347,-11.0978471 2.3781101,2.3781101 0,8.719737 m 0.79270337,-9.5124404 2.37811013,-2.3781101 2.3781101,2.3781101 0,8.719737 1.5854067,1.5854068 m -4.7562202,-11.8905505 2.3781101,2.3781101 0,8.719737 1.5854067,1.5854067 2.3781101,-2.3781101\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Sagittarius symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function sagittarius(x, y) {\n      // center symbol\n      var xShift = 7; //px\t\t\t\t\t\t\n\n      var yShift = -9; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_SAGITTARIUS));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" -17.11444,17.11444 m 17.11444,-17.11444 -3.2089575,1.0696525 -6.417915,0 m 7.4875675,1.0696525 -3.2089575,0 -4.27861,-1.0696525 m 9.6268725,-1.0696525 -1.0696525,3.2089575 0,6.41791504 m -1.0696525,-7.48756754 0,3.2089575 1.0696525,4.27861004 m -8.55722,0 -7.4875675,0 m 6.417915,1.06965246 -3.2089575,0 -3.2089575,-1.06965246 m 7.4875675,0 0,7.48756746 m -1.0696525,-6.417915 0,3.2089575 1.0696525,3.2089575\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Capricorn symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function capricorn(x, y) {\n      // center symbol\n      var xShift = -9; //px\t\t\t\t\t\t\n\n      var yShift = -3; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_CAPRICORN));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" 1.8047633,-3.6095267 4.5119084,9.0238168 m -4.5119084,-7.2190534 4.5119084,9.0238167 2.707145,-6.3166717 4.5119084,0 2.707145,-0.9023817 0.9023817,-1.8047633 0,-1.8047634 -0.9023817,-1.8047633 -1.8047634,-0.9023817 -0.9023816,0 -1.8047634,0.9023817 -0.9023817,1.8047633 0,1.8047634 0.9023817,2.707145 0.9023817,1.80476336 0.9023817,2.70714504 0,2.707145 -1.8047634,1.8047633 m 1.8047634,-16.2428701 -0.9023817,0.9023817 -0.9023817,1.8047633 0,1.8047634 1.8047634,3.6095267 0.9023816,2.707145 0,2.707145 -0.9023816,1.8047634 -1.8047634,0.9023816\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Aquarius symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function aquarius(x, y) {\n      // center symbol\n      var xShift = -8; //px\t\t\t\t\t\t\n\n      var yShift = -2; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_AQUARIUS));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" 2.8866035,-2.8866035 3.8488047,1.9244023 m -4.8110059,-0.9622011 3.8488047,1.9244023 2.8866035,-2.8866035 2.8866035,1.9244023 m -3.84880467,-0.9622011 2.88660347,1.9244023 2.8866035,-2.8866035 1.9244024,1.9244023 m -2.8866035,-0.9622011 1.9244023,1.9244023 2.8866035,-2.8866035 m -17.319621,8.6598105 2.8866035,-2.88660348 3.8488047,1.92440238 m -4.8110059,-0.96220121 3.8488047,1.92440231 2.8866035,-2.88660348 2.8866035,1.92440238 m -3.84880467,-0.96220121 2.88660347,1.92440231 2.8866035,-2.88660348 1.9244024,1.92440238 m -2.8866035,-0.96220121 1.9244023,1.92440231 2.8866035,-2.88660348\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /*\n     * Pisces symbol path\n     * @private\n     * \n     * @param {int} x\n     * @param {int} y\t \n     * \n     * @return {SVGPathElement} path\n     */\n\n    function pisces(x, y) {\n      // center symbol\n      var xShift = -8; //px\t\t\t\t\t\t\n\n      var yShift = -8; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getSignWrapperId(astrology.SYMBOL_PISCES));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" 4,2 2,2 1,3 0,3 -1,3 -2,2 -4,2 m 0,-17 3,1 2,1 2,2 1,3 m 0,3 -1,3 -2,2 -2,1 -3,1 m 16,-17 -3,1 -2,1 -2,2 -1,3 m 0,3 1,3 2,2 2,1 3,1 m 0,-17 -4,2 -2,2 -1,3 0,3 1,3 2,2 4,2 m -17,-9 18,0 m -18,1 18,0\");\n      node.setAttribute(\"stroke\", astrology.SIGNS_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SIGNS_STROKE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /**\n     * Draw As symbol\n     */\n\n    function ascendant(x, y) {\n      // center symbol\n      var xShift = 12; //px\t\t\t\t\t\t\n\n      var yShift = -2; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" -0.563078,-1.1261527 -1.689228,-0.5630765 -1.689229,0 -1.68923,0.5630765 -0.563076,1.1261527 0.563076,1.12615272 1.126154,0.56307636 2.815381,0.56307635 1.126152,0.56307647 0.563078,1.1261526 0,0.5630763 -0.563078,1.1261528 -1.689228,0.5630764 -1.689229,0 -1.68923,-0.5630764 -0.563076,-1.1261528 m -6.756916,-10.135374 -4.504611,11.8246032 m 4.504611,-11.8246032 4.504611,11.8246032 m -7.3199925,-3.94153457 5.6307625,0\");\n      node.setAttribute(\"stroke\", astrology.SYMBOL_AXIS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SYMBOL_AXIS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /**\n     * Draw Ds symbol\n     */\n\n    function descendant(x, y) {\n      // center symbol\n      var xShift = 22; //px\t\t\t\t\t\t\n\n      var yShift = -1; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" -0.5625,-1.125 -1.6875,-0.5625 -1.6875,0 -1.6875,0.5625 -0.5625,1.125 0.5625,1.125 1.125,0.5625 2.8125,0.5625 1.125,0.5625 0.5625,1.125 0,0.5625 -0.5625,1.125 -1.6875,0.5625 -1.6875,0 -1.6875,-0.5625 -0.5625,-1.125 m -11.25,-10.125 0,11.8125 m 0,-11.8125 3.9375,0 1.6875,0.5625 1.125,1.125 0.5625,1.125 0.5625,1.6875 0,2.8125 -0.5625,1.6875 -0.5625,1.125 -1.125,1.125 -1.6875,0.5625 -3.9375,0\");\n      node.setAttribute(\"stroke\", astrology.SYMBOL_AXIS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SYMBOL_AXIS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /**\n     * Draw MC symbol\n     */\n\n    function mediumCoeli(x, y) {\n      // center symbol\n      var xShift = 19; //px\t\t\t\t\t\t\n\n      var yShift = -4; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" -1.004085,-1.0040845 -1.004084,-0.5020423 -1.506127,0 -1.004085,0.5020423 -1.004084,1.0040845 -0.502043,1.50612689 0,1.00408458 0.502043,1.50612683 1.004084,1.0040846 1.004085,0.5020423 1.506127,0 1.004084,-0.5020423 1.004085,-1.0040846 m -17.57148,-9.0367612 0,10.5428881 m 0,-10.5428881 4.016338,10.5428881 m 4.016338,-10.5428881 -4.016338,10.5428881 m 4.016338,-10.5428881 0,10.5428881\");\n      node.setAttribute(\"stroke\", astrology.SYMBOL_AXIS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SYMBOL_AXIS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n    /**\n     * Draw IC symbol\n     */\n\n    function immumCoeli(x, y) {\n      // center symbol\n      var xShift = 19; //px\t\t\t\t\t\t\n\n      var yShift = 2; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m \" + x + \", \" + y + \" -1.208852,-1.2088514 -1.208851,-0.6044258 -1.813278,0 -1.208852,0.6044258 -1.20885,1.2088514 -0.604426,1.81327715 0,1.20885135 0.604426,1.8132772 1.20885,1.2088513 1.208852,0.6044259 1.813278,0 1.208851,-0.6044259 1.208852,-1.2088513 m -11.4840902,-10.8796629 0,12.6929401\");\n      node.setAttribute(\"stroke\", astrology.SYMBOL_AXIS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.SYMBOL_AXIS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number1(x, y) {\n      // center symbol\n      var xShift = 0; //px\t\t\t\t\t\t\n\n      var yShift = -3; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_1));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -2.5128753,7.7578884 1.00515009,0 m 3.01545031,-9.5832737 -1.0051501,1.8253853 -2.51287527,7.7578884 m 3.51802537,-9.5832737 -3.01545031,9.5832737 m 3.01545031,-9.5832737 -1.5077251,1.3690388 -1.50772521,0.9126929 -1.00515009,0.4563463 m 2.5128753,-0.9126927 -1.00515016,0.4563464 -1.50772514,0.4563463\");\n      node.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number2(x, y) {\n      // center symbol\n      var xShift = -2; //px\t\t\t\t\t\t\n\n      var yShift = -3; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_2));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" 0,-0.4545454 0.4545454,0 0,0.9090909 -0.9090909,0 0,-0.9090909 0.4545455,-0.9090909 0.4545454,-0.4545455 1.36363637,-0.4545454 1.36363633,0 1.3636364,0.4545454 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.9090909,0.9090909 -4.5454546,2.72727269 -0.9090909,0.90909091 -0.9090909,1.8181818 m 6.8181818,-9.0909091 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.9090909,0.9090909 -1.36363633,0.9090909 m 1.36363633,-5 0.4545455,0.4545454 0.4545454,0.9090909 0,0.9090909 -0.4545454,0.909091 -0.9090909,0.9090909 -3.6363637,2.72727269 m -1.3636363,1.81818181 0.4545454,-0.4545454 0.9090909,0 2.27272732,0.4545454 2.27272728,0 0.4545454,-0.4545454 m -5,0 2.27272732,0.9090909 2.27272728,0 m -4.5454546,-0.9090909 2.27272732,1.3636363 1.36363638,0 0.9090909,-0.4545454 0.4545454,-0.9090909 0,-0.4545455\");\n      node.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number3(x, y) {\n      // center symbol\n      var xShift = -2; //px\t\t\t\t\t\t\n\n      var yShift = -3; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_3));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" 0,-0.4545454 0.45454549,0 0,0.9090909 -0.90909089,0 0,-0.9090909 0.4545454,-0.9090909 0.45454549,-0.4545455 1.36363636,-0.4545454 1.36363635,0 1.3636364,0.4545454 0.4545454,0.9090909 0,0.9090909 -0.4545454,0.909091 -0.4545455,0.4545454 -0.9090909,0.4545455 -1.36363635,0.4545454 m 2.27272725,-4.0909091 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.4545454,0.4545454 m -0.4545455,-3.6363636 0.4545455,0.4545454 0.4545454,0.9090909 0,0.9090909 -0.4545454,0.909091 -0.9090909,0.9090909 -0.90909095,0.4545454 m -0.9090909,0 0.9090909,0 1.36363635,0.4545455 0.4545455,0.45454542 0.4545454,0.90909091 0,1.36363637 -0.4545454,0.9090909 -0.9090909,0.4545455 -1.3636364,0.4545454 -1.3636364,0 -1.3636363,-0.4545454 -0.4545455,-0.4545455 -0.4545454,-0.9090909 0,-0.90909091 0.9090909,0 0,0.90909091 -0.4545455,0 0,-0.45454546 m 5,-1.81818182 0.4545455,0.90909091 0,1.36363637 -0.4545455,0.9090909 m -1.36363635,-4.0909091 0.90909095,0.4545455 0.4545454,0.90909088 0,1.81818182 -0.4545454,0.9090909 -0.45454549,0.4545455 -0.90909091,0.4545454\");\n      node.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number4(x, y) {\n      // center symbol\n      var xShift = 1; //px\t\t\t\t\t\t\n\n      var yShift = -4; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_4));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -2.28678383,7.7750651 0.91471356,0 m 2.74414057,-9.6044922 -0.9147135,1.8294271 -2.28678386,7.7750651 m 3.20149736,-9.6044922 -2.74414057,9.6044922 m 2.74414057,-9.6044922 -7.3177083,6.8603516 7.3177083,0\");\n      node.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number5(x, y) {\n      // center symbol\n      var xShift = -2; //px\t\t\t\t\t\t\n\n      var yShift = -5; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_5));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -2.27272725,4.5454545 m 2.27272725,-4.5454545 4.54545455,0 m -4.54545455,0.4545454 3.63636365,0 m -4.0909091,0.4545455 2.2727273,0 1.8181818,-0.4545455 0.9090909,-0.4545454 m -6.8181818,4.5454545 0.4545454,-0.4545454 1.3636364,-0.4545455 1.36363636,0 1.36363634,0.4545455 0.4545455,0.4545454 0.4545454,0.90909092 0,1.36363638 -0.4545454,1.3636364 -0.9090909,0.9090909 -1.81818185,0.4545454 -1.36363635,0 -0.9090909,-0.4545454 -0.4545455,-0.4545455 -0.4545454,-0.9090909 0,-0.9090909 0.9090909,0 0,0.9090909 -0.4545455,0 0,-0.45454545 m 5,-2.72727275 0.4545455,0.90909092 0,1.36363638 -0.4545455,1.3636364 -0.9090909,0.9090909 m -0.45454544,-5.4545455 0.90909094,0.4545455 0.4545454,0.9090909 0,1.8181818 -0.4545454,1.3636364 -0.90909094,0.9090909 -0.90909091,0.4545454\");\n      node.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number6(x, y) {\n      // center symbol\n      var xShift = 3; //px\t\t\t\t\t\t\n\n      var yShift = -3; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_6));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" 0,-0.4545455 -0.4545455,0 0,0.9090909 0.9090909,0 0,-0.9090909 -0.4545454,-0.9090909 -0.909091,-0.4545454 -1.3636363,0 -1.36363638,0.4545454 -0.90909092,0.9090909 -0.9090909,1.3636364 -0.4545455,1.3636364 -0.4545454,1.81818178 0,1.36363636 0.4545454,1.36363636 0.4545455,0.4545455 0.9090909,0.4545454 1.36363637,0 1.36363633,-0.4545454 0.9090909,-0.9090909 0.4545455,-0.90909096 0,-1.36363636 -0.4545455,-0.90909088 -0.4545454,-0.4545455 -0.9090909,-0.4545454 -1.36363638,0 -0.90909092,0.4545454 -0.4545454,0.4545455 -0.4545455,0.90909088 m 1.36363636,-4.54545458 -0.90909086,1.3636364 -0.4545455,1.3636364 -0.4545455,1.81818178 0,1.81818182 0.4545455,0.9090909 m 4.0909091,-0.4545454 0.4545454,-0.90909096 0,-1.36363636 -0.4545454,-0.90909088 m -0.9090909,-5 -0.90909093,0.4545454 -0.90909091,1.3636364 -0.45454546,0.9090909 -0.4545454,1.3636364 -0.4545455,1.81818178 0,2.27272732 0.4545455,0.9090909 0.4545454,0.4545454 m 1.36363637,0 0.90909093,-0.4545454 0.4545454,-0.4545455 0.4545455,-1.36363636 0,-1.81818182 -0.4545455,-0.90909092 -0.4545454,-0.4545454\");\n      node.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number7(x, y) {\n      // center symbol\n      var xShift = -4; //px\t\t\t\t\t\t\n\n      var yShift = -4; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_7));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -0.9090909,2.7272727 m 6.8181818,-2.7272727 -0.4545454,1.3636363 -0.909091,1.3636364 -1.8181818,2.2727273 -0.90909088,1.36363633 -0.45454546,1.36363637 -0.45454545,1.8181818 m 0.90909091,-3.63636362 -0.90909091,1.81818182 -0.45454546,1.8181818 m 4.09090905,-6.8181818 -2.72727268,2.72727272 -0.90909091,1.36363637 -0.45454546,0.90909091 -0.45454545,1.8181818 0.90909091,0 m -1.36363641,-8.1818182 1.36363641,-1.3636363 0.90909091,0 2.27272728,1.3636363 m -3.63636365,-0.9090909 1.36363637,0 2.27272728,0.9090909 m -4.5454546,0 0.90909095,-0.4545454 1.36363637,0 2.27272728,0.4545454 0.9090909,0 0.4545455,-0.4545454 0.4545454,-0.9090909\");\n      node.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number8(x, y) {\n      // center symbol\n      var xShift = -1; //px\t\t\t\t\t\t\n\n      var yShift = -5; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_8));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -1.3631244,0.4543748 -0.4543748,0.4543748 -0.4543748,0.9087496 0,1.3631244 0.4543748,0.9087496 0.9087496,0.4543748 1.3631244,0 1.3631244,-0.4543748 0.9087496,-0.4543748 0.4543748,-0.9087496 0,-1.3631244 -0.4543748,-0.9087496 -0.9087496,-0.4543748 -1.8174992,0 m 0.9087496,0 -2.271874,0.4543748 m 0,0.4543748 -0.4543748,0.9087496 0,1.8174992 0.4543748,0.4543748 m -0.4543748,0 1.3631244,0.4543748 m 0.4543748,0 1.8174992,-0.4543748 m 0.4543748,-0.4543748 0.4543748,-0.9087496 0,-1.3631244 -0.4543748,-0.9087496 m 0.4543748,0 -1.8174992,-0.4543748 m -0.9087496,0 -0.9087496,0.9087496 -0.4543748,0.9087496 0,1.8174992 0.4543748,0.9087496 m 1.3631244,0 0.9087496,-0.4543748 0.4543748,-0.4543748 0.4543748,-0.9087496 0,-1.8174992 -0.4543748,-0.9087496 m -2.7262488,4.543748 -1.8174992,0.4543748 -0.9087496,0.90874964 -0.4543748,0.9087496 0,1.36312436 0.4543748,0.9087496 1.3631244,0.4543748 1.8174992,0 1.8174992,-0.4543748 0.4543748,-0.4543748 0.4543748,-0.9087496 0,-1.36312436 -0.4543748,-0.9087496 -0.4543748,-0.45437484 -0.9087496,-0.4543748 m -0.9087496,0 -2.271874,0.4543748 m 0.4543748,0 -0.9087496,0.90874964 -0.4543748,0.9087496 0,1.36312436 0.4543748,0.9087496 m -0.4543748,0 2.271874,0.4543748 2.7262488,-0.4543748 m 0,-0.4543748 0.4543748,-0.9087496 0,-1.36312436 -0.4543748,-0.9087496 m 0,-0.45437484 -1.3631244,-0.4543748 m -0.9087496,0 -0.9087496,0.4543748 -0.9087496,0.90874964 -0.4543748,0.9087496 0,1.36312436 0.4543748,0.9087496 0.4543748,0.4543748 m 1.8174992,0 0.9087496,-0.4543748 0.4543748,-0.4543748 0.4543748,-0.9087496 0,-1.81749916 -0.4543748,-0.90874964 -0.4543748,-0.4543748\");\n      node.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number9(x, y) {\n      // center symbol\n      var xShift = 1; //px\t\t\t\t\t\t\n\n      var yShift = -2; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_9));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var node = document.createElementNS(context.root.namespaceURI, \"path\");\n      node.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -0.4545455,0.9090909 -0.4545454,0.4545455 -0.9090909,0.45454542 -1.36363638,0 -0.90909092,-0.45454542 -0.4545454,-0.4545455 -0.4545455,-0.9090909 0,-1.3636364 0.4545455,-0.9090909 0.90909086,-0.9090909 1.36363637,-0.4545454 1.36363637,0 0.9090909,0.4545454 0.4545455,0.4545455 0.4545454,1.3636363 0,1.3636364 -0.4545454,1.81818182 -0.4545455,1.36363637 -0.9090909,1.36363641 -0.9090909,0.9090909 -1.36363638,0.4545454 -1.36363632,0 -0.909091,-0.4545454 -0.4545454,-0.9090909 0,-0.90909096 0.9090909,0 0,0.90909096 -0.4545455,0 0,-0.4545455 m 1.3636364,-3.1818182 -0.4545454,-0.9090909 0,-1.3636364 0.4545454,-0.9090909 m 4.0909091,-0.4545454 0.4545455,0.9090909 0,1.8181818 -0.4545455,1.81818182 -0.4545455,1.36363637 -0.9090909,1.36363641 m -1.81818178,-2.72727278 -0.45454546,-0.45454542 -0.45454546,-0.9090909 0,-1.8181819 0.45454546,-1.3636363 0.45454546,-0.4545455 0.90909091,-0.4545454 m 1.36363637,0 0.4545454,0.4545454 0.4545455,0.9090909 0,2.2727273 -0.4545455,1.81818182 -0.4545454,1.36363637 -0.4545455,0.90909091 -0.90909087,1.3636364 -0.90909091,0.4545454\");\n      node.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      node.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      node.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(node);\n      return wrapper;\n    }\n\n    ;\n\n    function number10(x, y) {\n      // center symbol\n      var xShift = -3; //px\t\t\t\t\t\t\n\n      var yShift = -3.5; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_10));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var one = document.createElementNS(context.root.namespaceURI, \"path\");\n      one.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -2.28795747,7.7790553 0.91518297,0 m 2.7455489,-9.6094213 -0.9151829,1.830366 -2.28795748,7.7790553 m 3.20314038,-9.6094213 -2.7455489,9.6094213 m 2.7455489,-9.6094213 -1.3727744,1.3727745 -1.3727745,0.915183 -0.91518297,0.4575915 m 2.28795747,-0.915183 -0.91518301,0.4575915 -1.37277446,0.4575915\");\n      one.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      one.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      one.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(one);\n      var numberXShift = 6.5; //px\t\t\t\t\t\t\n\n      var numberYShift = -1.5; //px\n\n      var zero = document.createElementNS(context.root.namespaceURI, \"path\");\n      zero.setAttribute(\"d\", \"m\" + (x + numberXShift) + \", \" + (y + numberYShift) + \" -1.36363638,0.4545454 -0.90909092,0.9090909 -0.9090909,1.3636364 -0.4545455,1.3636364 -0.4545454,1.81818178 0,1.36363636 0.4545454,1.36363636 0.4545455,0.4545455 0.9090909,0.4545454 0.90909092,0 1.36363638,-0.4545454 0.9090909,-0.9090909 0.9090909,-1.36363641 0.4545455,-1.36363637 0.4545454,-1.81818182 0,-1.3636364 -0.4545454,-1.3636363 -0.4545455,-0.4545455 -0.9090909,-0.4545454 -0.9090909,0 m -1.36363638,0.9090909 -0.90909092,0.9090909 -0.4545454,0.9090909 -0.4545455,1.3636364 -0.4545455,1.81818178 0,1.81818182 0.4545455,0.9090909 m 3.1818182,0 0.9090909,-0.9090909 0.4545454,-0.90909091 0.4545455,-1.36363637 0.4545455,-1.81818182 0,-1.8181818 -0.4545455,-0.9090909 m -1.8181818,-0.9090909 -0.90909093,0.4545454 -0.90909091,1.3636364 -0.45454546,0.9090909 -0.4545454,1.3636364 -0.4545455,1.81818178 0,2.27272732 0.4545455,0.9090909 0.4545454,0.4545454 m 0.90909092,0 0.90909091,-0.4545454 0.90909087,-1.3636364 0.4545455,-0.90909091 0.4545454,-1.36363637 0.4545455,-1.81818182 0,-2.2727273 -0.4545455,-0.9090909 -0.4545454,-0.4545454\");\n      zero.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      zero.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      zero.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(zero);\n      return wrapper;\n    }\n\n    ;\n\n    function number11(x, y) {\n      // center symbol\n      var xShift = -3; //px\t\t\t\t\t\t\n\n      var yShift = -3; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_11));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var one = document.createElementNS(context.root.namespaceURI, \"path\");\n      one.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -2.28795747,7.7790553 0.91518297,0 m 2.7455489,-9.6094213 -0.9151829,1.830366 -2.28795748,7.7790553 m 3.20314038,-9.6094213 -2.7455489,9.6094213 m 2.7455489,-9.6094213 -1.3727744,1.3727745 -1.3727745,0.915183 -0.91518297,0.4575915 m 2.28795747,-0.915183 -0.91518301,0.4575915 -1.37277446,0.4575915\");\n      one.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      one.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      one.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(one);\n      var numberXShift = 6; //px\t\t\t\t\t\t\n\n      var numberYShift = 0; //px\n\n      var one2 = document.createElementNS(context.root.namespaceURI, \"path\");\n      one2.setAttribute(\"d\", \"m\" + (x + numberXShift) + \", \" + (y + numberYShift) + \" -2.28795747,7.7790553 0.91518297,0 m 2.7455489,-9.6094213 -0.9151829,1.830366 -2.28795748,7.7790553 m 3.20314038,-9.6094213 -2.7455489,9.6094213 m 2.7455489,-9.6094213 -1.3727744,1.3727745 -1.3727745,0.915183 -0.91518297,0.4575915 m 2.28795747,-0.915183 -0.91518301,0.4575915 -1.37277446,0.4575915\");\n      one2.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      one2.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      one2.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(one2);\n      return wrapper;\n    }\n\n    ;\n\n    function number12(x, y) {\n      // center symbol\n      var xShift = -3; //px\t\t\t\t\t\t\n\n      var yShift = -3; //px\t\t\n\n      x = Math.round(x + xShift * astrology.SYMBOL_SCALE);\n      y = Math.round(y + yShift * astrology.SYMBOL_SCALE);\n      var wrapper = document.createElementNS(context.root.namespaceURI, \"g\");\n      wrapper.setAttribute('id', getHouseIdWrapper(astrology.SYMBOL_CUSP_12));\n      wrapper.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      var one = document.createElementNS(context.root.namespaceURI, \"path\");\n      one.setAttribute(\"d\", \"m\" + x + \", \" + y + \" -2.28795747,7.7790553 0.91518297,0 m 2.7455489,-9.6094213 -0.9151829,1.830366 -2.28795748,7.7790553 m 3.20314038,-9.6094213 -2.7455489,9.6094213 m 2.7455489,-9.6094213 -1.3727744,1.3727745 -1.3727745,0.915183 -0.91518297,0.4575915 m 2.28795747,-0.915183 -0.91518301,0.4575915 -1.37277446,0.4575915\");\n      one.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      one.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      one.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(one);\n      var numberXShift = 4; //px\t\t\t\t\t\t\n\n      var numberYShift = 1; //px\n\n      var two = document.createElementNS(context.root.namespaceURI, \"path\");\n      two.setAttribute(\"d\", \"m\" + (x + numberXShift) + \", \" + (y + numberYShift) + \" 0,-0.4545454 0.4545454,0 0,0.9090909 -0.9090909,0 0,-0.9090909 0.4545455,-0.9090909 0.4545454,-0.4545455 1.36363637,-0.4545454 1.36363633,0 1.3636364,0.4545454 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.9090909,0.9090909 -4.5454546,2.72727269 -0.9090909,0.90909091 -0.9090909,1.8181818 m 6.8181818,-9.0909091 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.9090909,0.9090909 -1.36363633,0.9090909 m 1.36363633,-5 0.4545455,0.4545454 0.4545454,0.9090909 0,0.9090909 -0.4545454,0.909091 -0.9090909,0.9090909 -3.6363637,2.72727269 m -1.3636363,1.81818181 0.4545454,-0.4545454 0.9090909,0 2.27272732,0.4545454 2.27272728,0 0.4545454,-0.4545454 m -5,0 2.27272732,0.9090909 2.27272728,0 m -4.5454546,-0.9090909 2.27272732,1.3636363 1.36363638,0 0.9090909,-0.4545454 0.4545454,-0.9090909 0,-0.4545455\");\n      two.setAttribute(\"stroke\", astrology.CUSPS_FONT_COLOR);\n      two.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      two.setAttribute(\"fill\", \"none\");\n      wrapper.appendChild(two);\n      return wrapper;\n    }\n\n    ;\n    /**\n     * Draw circular sector\n     * \n     * @param {int} x - circle x center position\n     * @param {int} y - circle y center position\n     * @param {int} radius - circle radius in px\n     * @param {int} a1 - angleFrom in degree\n     * @param {int} a2 - angleTo in degree\n     * @param {int} thickness - from outside to center in px  \t\n     * \n     * @return {SVGElement} segment\n     *  \n     * @see SVG Path arc: https://www.w3.org/TR/SVG/paths.html#PathData\n     */\n\n    astrology.SVG.prototype.segment = function segment(x, y, radius, a1, a2, thickness, lFlag, sFlag) {\n      // @see SVG Path arc: https://www.w3.org/TR/SVG/paths.html#PathData\n      var LARGE_ARC_FLAG = lFlag || 0;\n      var SWEET_FLAG = sFlag || 0;\n      a1 = (astrology.SHIFT_IN_DEGREES - a1) % 360 * Math.PI / 180;\n      a2 = (astrology.SHIFT_IN_DEGREES - a2) % 360 * Math.PI / 180;\n      var segment = document.createElementNS(context.root.namespaceURI, \"path\");\n      segment.setAttribute(\"d\", \"M \" + (x + thickness * Math.cos(a1)) + \", \" + (y + thickness * Math.sin(a1)) + \" l \" + (radius - thickness) * Math.cos(a1) + \", \" + (radius - thickness) * Math.sin(a1) + \" A \" + radius + \", \" + radius + \",0 ,\" + LARGE_ARC_FLAG + \", \" + SWEET_FLAG + \", \" + (x + radius * Math.cos(a2)) + \", \" + (y + radius * Math.sin(a2)) + \" l \" + (radius - thickness) * -Math.cos(a2) + \", \" + (radius - thickness) * -Math.sin(a2) + \" A \" + thickness + \", \" + thickness + \",0 ,\" + LARGE_ARC_FLAG + \", \" + 1 + \", \" + (x + thickness * Math.cos(a1)) + \", \" + (y + thickness * Math.sin(a1)));\n      segment.setAttribute(\"fill\", \"none\");\n      return segment;\n    };\n    /**\n     * Draw line in circle\n     * \n     * @param {int} x1\n     * @param {int} y2\n     * @param {int} x2\n     * @param {int} y2 \n     * @param {String} color - HTML rgb\t \n     * \n     * @return {SVGElement} line\n     */\n\n\n    astrology.SVG.prototype.line = function line(x1, y1, x2, y2, color) {\n      var line = document.createElementNS(context.root.namespaceURI, \"line\");\n      line.setAttribute(\"x1\", x1);\n      line.setAttribute(\"y1\", y1);\n      line.setAttribute(\"x2\", x2);\n      line.setAttribute(\"y2\", y2);\n      return line;\n    };\n    /**\n     * Draw a circle\n     * \n     * @param {int} cx\n     * @param {int} cy\n     * @param {int} radius\t\n     * \n     * @return {SVGElement} circle\n     */\n\n\n    astrology.SVG.prototype.circle = function circle(cx, cy, radius) {\n      var circle = document.createElementNS(context.root.namespaceURI, \"circle\");\n      circle.setAttribute(\"cx\", cx);\n      circle.setAttribute(\"cy\", cy);\n      circle.setAttribute(\"r\", radius);\n      circle.setAttribute(\"fill\", \"none\");\n      return circle;\n    };\n    /**\n     * Draw a text\n     * \n     * @param {String} text\n     * @param {int} x\n     * @param {int} y\n     * @param {String} size - etc. \"13px\"\n     * @param {String} color - HTML rgb\n     * \n     * @return {SVGElement} text\n     */\n\n\n    astrology.SVG.prototype.text = function text(txt, x, y, size, color) {\n      var text = document.createElementNS(context.root.namespaceURI, \"text\");\n      text.setAttribute(\"x\", x);\n      text.setAttribute(\"y\", y);\n      text.setAttribute(\"font-size\", size);\n      text.setAttribute(\"fill\", color);\n      text.setAttribute(\"font-family\", \"serif\");\n      text.setAttribute(\"dominant-baseline\", \"central\");\n      text.appendChild(document.createTextNode(txt));\n      text.setAttribute(\"transform\", \"translate(\" + -x * (astrology.SYMBOL_SCALE - 1) + \",\" + -y * (astrology.SYMBOL_SCALE - 1) + \") scale(\" + astrology.SYMBOL_SCALE + \")\");\n      return text;\n    };\n  })(window.astrology = window.astrology || {}); // ## CHART ###################################\n\n\n  (function (astrology) {\n    /**\n     * Displays astrology charts.\n     * \n     * @class\n     * @public\n     * @constructor\n      * @param {String} elementId - root DOMElement \n     * @param {int} width\n     * @param {int} height\n     * @param {Object} settings\n     */\n    astrology.Chart = function (elementId, width, height, settings) {\n      if (settings) {\n        Object.assign(astrology, settings);\n        if (!('COLORS_SIGNS' in settings)) astrology.COLORS_SIGNS = [astrology.COLOR_ARIES, astrology.COLOR_TAURUS, astrology.COLOR_GEMINI, astrology.COLOR_CANCER, astrology.COLOR_LEO, astrology.COLOR_VIRGO, astrology.COLOR_LIBRA, astrology.COLOR_SCORPIO, astrology.COLOR_SAGITTARIUS, astrology.COLOR_CAPRICORN, astrology.COLOR_AQUARIUS, astrology.COLOR_PISCES];\n      }\n\n      if (elementId && !document.getElementById(elementId)) {\n        var paper = document.createElement('div');\n        paper.setAttribute('id', elementId);\n        document.body.appendChild(paper);\n      }\n\n      this.paper = new astrology.SVG(elementId, width, height);\n      this.cx = this.paper.width / 2;\n      this.cy = this.paper.height / 2;\n      this.radius = this.paper.height / 2 - astrology.MARGIN;\n      return this;\n    };\n    /**\n     * Display radix horoscope\n     * \n     * @param {Object} data\n     * @example\n     *\t{\n     *\t\t\"points\":{\"Moon\":[0], \"Sun\":[30],  ... },\n     *\t\t\"cusps\":[300, 340, 30, 60, 75, 90, 116, 172, 210, 236, 250, 274] \n     *\t}\n     * \n     * @see https://github.com/Kibo/AstroWebService \n     * \n     * @return {astrology.Radix} radix\n     */\n\n\n    astrology.Chart.prototype.radix = function (data) {\n      var radix = new astrology.Radix(this.paper, this.cx, this.cy, this.radius, data);\n      radix.drawBg();\n      radix.drawUniverse();\n      radix.drawRuler();\n      radix.drawPoints();\n      radix.drawCusps();\n      radix.drawAxis();\n      radix.drawCircles();\n      return radix;\n    };\n    /**\n    * Scale chart\n    * \n    * @param {int} factor \n    */\n\n\n    astrology.Chart.prototype.scale = function (factor) {\n      this.paper.root.setAttribute(\"transform\", \"translate(\" + -this.cx * (factor - 1) + \",\" + -this.cy * (factor - 1) + \") scale(\" + factor + \")\");\n    };\n    /**\n     * Draw the symbol on the axis.\n     * For debug only.\n     * \t\n     */\n\n\n    astrology.Chart.prototype.calibrate = function calibrate() {\n      var positions, circle, line;\n      var startRadius = 60;\n      var planets = [\"Sun\", \"Moon\", \"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Pluto\", \"Chiron\", \"Lilith\", \"NNode\"];\n\n      for (var i = 0; i < planets.length; i++) {\n        positions = astrology.utils.getPointPosition(this.cx, this.cy, this.radius * 2, i * 30);\n        line = this.paper.line(this.cx, this.cy, positions.x, positions.y);\n        line.setAttribute(\"stroke\", astrology.LINE_COLOR);\n        this.paper.root.appendChild(line);\n        circle = this.paper.circle(this.cx, this.cy, startRadius + startRadius * i);\n        circle.setAttribute(\"stroke\", astrology.LINE_COLOR);\n        circle.setAttribute(\"stroke-width\", 1);\n        this.paper.root.appendChild(circle);\n      }\n\n      for (var n = 0, ln = planets.length; n < ln; n++) {\n        var radius = startRadius + startRadius * n;\n\n        for (var i = 0; i < 12; i++) {\n          positions = astrology.utils.getPointPosition(this.cx, this.cy, radius, i * 30);\n          circle = this.paper.circle(positions.x, positions.y, astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE);\n          circle.setAttribute(\"stroke\", \"red\");\n          circle.setAttribute(\"stroke-width\", 1);\n          this.paper.root.appendChild(circle);\n          this.paper.root.appendChild(this.paper.getSymbol(planets[n], positions.x, positions.y));\n        }\n      }\n\n      return this;\n    };\n  })(window.astrology = window.astrology || {}); // ## Radix chart ###################################\n\n\n  (function (astrology) {\n    var context;\n    /**\n     * Radix charts.\n     * \n     * @class\n     * @public\n     * @constructor\n      * @param {astrology.SVG} paper \n     * @param {int} cx\n     * @param {int} cy\n     * @param {int} radius\n     * @param {Object} data\n     */\n\n    astrology.Radix = function (paper, cx, cy, radius, data) {\n      // Validate data\n      var status = astrology.utils.validate(data);\n\n      if (status.hasError) {\n        throw new Error(status.messages);\n      }\n\n      this.data = data;\n      this.paper = paper;\n      this.cx = cx;\n      this.cy = cy;\n      this.radius = radius; // after calling this.drawPoints() it contains current position of point\n\n      this.locatedPoints = [];\n      this.rulerRadius = this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO / astrology.RULER_RADIUS;\n      this.pointRadius = this.radius - (this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO + 2 * this.rulerRadius + astrology.PADDING * astrology.SYMBOL_SCALE); //@see astrology.Radix.prototype.aspects()\n      //@see astrology.Radix.prototype.setPointsOfInterest() \n\n      this.toPoints = JSON.parse(JSON.stringify(this.data.planets)); // Clone object\n\n      this.shift = 0;\n\n      if (this.data.cusps && this.data.cusps[0]) {\n        var deg360 = astrology.utils.radiansToDegree(2 * Math.PI);\n        this.shift = deg360 - this.data.cusps[0];\n      } // preparing wrapper for aspects. It is the lowest layer\n\n\n      var divisionForAspects = document.createElementNS(this.paper.root.namespaceURI, \"g\");\n      divisionForAspects.setAttribute('id', astrology._paperElementId + \"-\" + astrology.ID_ASPECTS);\n      this.paper.root.appendChild(divisionForAspects);\n      this.universe = document.createElementNS(this.paper.root.namespaceURI, \"g\");\n      this.universe.setAttribute('id', astrology._paperElementId + \"-\" + astrology.ID_RADIX);\n      this.paper.root.appendChild(this.universe);\n      context = this;\n      return this;\n    };\n    /**\n     * Draw background\n     */\n\n\n    astrology.Radix.prototype.drawBg = function () {\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_BG);\n      var LARGE_ARC_FLAG = 1;\n      var start = 0; //degree\n\n      var end = 359.99; //degree \t\t\t\t\n\n      var hemisphere = this.paper.segment(this.cx, this.cy, this.radius - this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO, start, end, this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO, LARGE_ARC_FLAG);\n      hemisphere.setAttribute(\"fill\", astrology.STROKE_ONLY ? \"none\" : astrology.COLOR_BACKGROUND);\n      wrapper.appendChild(hemisphere);\n    };\n    /**\n     * Draw universe.\n     */\n\n\n    astrology.Radix.prototype.drawUniverse = function () {\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_RADIX + \"-\" + astrology.ID_SIGNS); // colors \n\n      for (var i = 0, step = 30, start = this.shift, len = astrology.COLORS_SIGNS.length; i < len; i++) {\n        var segment = this.paper.segment(this.cx, this.cy, this.radius, start, start + step, this.radius - this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO);\n        segment.setAttribute(\"fill\", astrology.STROKE_ONLY ? \"none\" : astrology.COLORS_SIGNS[i]);\n        segment.setAttribute(\"id\", astrology._paperElementId + \"-\" + astrology.ID_RADIX + \"-\" + astrology.ID_SIGNS + \"-\" + i);\n        segment.setAttribute(\"stroke\", astrology.STROKE_ONLY ? astrology.CIRCLE_COLOR : \"none\");\n        segment.setAttribute(\"stroke-width\", astrology.STROKE_ONLY ? 1 : 0);\n        wrapper.appendChild(segment);\n        start += step;\n      }\n\n      ; // signs\n\n      for (var i = 0, step = 30, start = 15 + this.shift, len = astrology.SYMBOL_SIGNS.length; i < len; i++) {\n        var position = astrology.utils.getPointPosition(this.cx, this.cy, this.radius - this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO / 2, start);\n        wrapper.appendChild(this.paper.getSymbol(astrology.SYMBOL_SIGNS[i], position.x, position.y));\n        start += step;\n      }\n    };\n    /**\n     * Draw points\n     */\n\n\n    astrology.Radix.prototype.drawPoints = function () {\n      if (this.data.planets == null) {\n        return;\n      }\n\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_RADIX + \"-\" + astrology.ID_POINTS);\n      var gap = this.radius - (this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO + this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO);\n      var step = (gap - 2 * (astrology.PADDING * astrology.SYMBOL_SCALE)) / Object.keys(this.data.planets).length;\n      var pointerRadius = this.radius - (this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO + this.rulerRadius);\n      var startPosition, endPosition;\n\n      for (var planet in this.data.planets) {\n        if (this.data.planets.hasOwnProperty(planet)) {\n          var position = astrology.utils.getPointPosition(this.cx, this.cy, this.pointRadius, this.data.planets[planet][0] + this.shift);\n          var point = {\n            name: planet,\n            x: position.x,\n            y: position.y,\n            r: astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE,\n            angle: this.data.planets[planet][0] + this.shift,\n            pointer: this.data.planets[planet][0] + this.shift\n          };\n          this.locatedPoints = astrology.utils.assemble(this.locatedPoints, point, {\n            cx: this.cx,\n            cy: this.cy,\n            r: this.pointRadius\n          });\n        }\n      }\n\n      if (astrology.DEBUG) console.log(\"Radix count of points: \" + this.locatedPoints.length);\n      if (astrology.DEBUG) console.log(\"Radix located points:\\n\" + JSON.stringify(this.locatedPoints));\n      this.locatedPoints.forEach(function (point) {\n        // draw pointer        \t\n        startPosition = astrology.utils.getPointPosition(this.cx, this.cy, pointerRadius, this.data.planets[point.name][0] + this.shift);\n        endPosition = astrology.utils.getPointPosition(this.cx, this.cy, pointerRadius - this.rulerRadius / 2, this.data.planets[point.name][0] + this.shift);\n        var pointer = this.paper.line(startPosition.x, startPosition.y, endPosition.x, endPosition.y);\n        pointer.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n        pointer.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n        wrapper.appendChild(pointer); // draw pointer line\n\n        if (!astrology.STROKE_ONLY && this.data.planets[point.name][0] + this.shift != point.angle) {\n          startPosition = endPosition;\n          endPosition = astrology.utils.getPointPosition(this.cx, this.cy, this.pointRadius + astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE, point.angle);\n          var line = this.paper.line(startPosition.x, startPosition.y, endPosition.x, endPosition.y);\n          line.setAttribute(\"stroke\", astrology.LINE_COLOR);\n          line.setAttribute(\"stroke-width\", 0.5 * (astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE));\n          wrapper.appendChild(line);\n        } // draw symbol\t\t\t\t\t\t\n\n\n        var symbol = this.paper.getSymbol(point.name, point.x, point.y);\n        symbol.setAttribute('id', astrology._paperElementId + \"-\" + astrology.ID_RADIX + \"-\" + astrology.ID_POINTS + \"-\" + point.name);\n        wrapper.appendChild(symbol); // draw point descriptions\n\n        var textsToShow = [(Math.round(this.data.planets[point.name][0]) % 30).toString()];\n        var zodiac = new astrology.Zodiac(this.data.cusps);\n\n        if (this.data.planets[point.name][1] && zodiac.isRetrograde(this.data.planets[point.name][1])) {\n          textsToShow.push(\"R\");\n        } else {\n          textsToShow.push(\"\");\n        }\n\n        textsToShow = textsToShow.concat(zodiac.getDignities({\n          \"name\": point.name,\n          \"position\": this.data.planets[point.name][0]\n        }, astrology.DIGNITIES_EXACT_EXALTATION_DEFAULT).join(\",\"));\n        var pointDescriptions = astrology.utils.getDescriptionPosition(point, textsToShow);\n        pointDescriptions.forEach(function (dsc) {\n          wrapper.appendChild(this.paper.text(dsc.text, dsc.x, dsc.y, astrology.POINTS_TEXT_SIZE, astrology.SIGNS_COLOR));\n        }, this);\n      }, this);\n    };\n\n    astrology.Radix.prototype.drawAxis = function () {\n      if (this.data.cusps == null) {\n        return;\n      }\n\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_RADIX + \"-\" + astrology.ID_AXIS);\n      var axisRadius = this.radius + this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO / 4;\n      var AS = 0;\n      var IC = 3;\n      var DC = 6;\n      var MC = 9;\n      var overlapLine, startPosition, endPosition, line, lines;\n      [AS, IC, DC, MC].forEach(function (i) {\n        // overlap \t\t\t\t\t\t\t\t\t\t\t\t\n        startPosition = astrology.utils.getPointPosition(this.cx, this.cy, this.radius, this.data.cusps[i] + this.shift);\n        endPosition = astrology.utils.getPointPosition(this.cx, this.cy, axisRadius, this.data.cusps[i] + this.shift);\n        overlapLine = this.paper.line(startPosition.x, startPosition.y, endPosition.x, endPosition.y);\n        overlapLine.setAttribute(\"stroke\", astrology.LINE_COLOR);\n        overlapLine.setAttribute(\"stroke-width\", astrology.SYMBOL_AXIS_STROKE * astrology.SYMBOL_SCALE);\n        wrapper.appendChild(overlapLine); // As\n\n        if (i == AS) {\n          // Text\n          this.textPosition = astrology.utils.getPointPosition(this.cx, this.cy, axisRadius + 20 * astrology.SYMBOL_SCALE, this.data.cusps[i] + this.shift);\n          wrapper.appendChild(this.paper.getSymbol(astrology.SYMBOL_AS, this.textPosition.x, this.textPosition.y));\n        } // Ds\n\n\n        if (i == DC) {\n          // Text\n          this.textPosition = astrology.utils.getPointPosition(this.cx, this.cy, axisRadius + 2 * astrology.SYMBOL_SCALE, this.data.cusps[i] + this.shift);\n          wrapper.appendChild(this.paper.getSymbol(astrology.SYMBOL_DS, this.textPosition.x, this.textPosition.y));\n        } // Ic\n\n\n        if (i == IC) {\n          // Text\n          this.textPosition = astrology.utils.getPointPosition(this.cx, this.cy, axisRadius + 10 * astrology.SYMBOL_SCALE, this.data.cusps[i] - 2 + this.shift);\n          wrapper.appendChild(this.paper.getSymbol(astrology.SYMBOL_IC, this.textPosition.x, this.textPosition.y));\n        } // Mc\n\n\n        if (i == MC) {\n          // Text\n          this.textPosition = astrology.utils.getPointPosition(this.cx, this.cy, axisRadius + 10 * astrology.SYMBOL_SCALE, this.data.cusps[i] + 2 + this.shift);\n          wrapper.appendChild(this.paper.getSymbol(astrology.SYMBOL_MC, this.textPosition.x, this.textPosition.y));\n        }\n      }, this);\n    };\n    /**\n     * Draw cusps\n     */\n\n\n    astrology.Radix.prototype.drawCusps = function () {\n      if (this.data.cusps == null) {\n        return;\n      }\n\n      var startPosition, endPosition, lines, line;\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_RADIX + \"-\" + astrology.ID_CUSPS);\n      var numbersRadius = this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO + astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE;\n      var AS = 0;\n      var IC = 3;\n      var DC = 6;\n      var MC = 9;\n      var mainAxis = [AS, IC, DC, MC]; //Cusps\n\n      for (var i = 0, ln = this.data.cusps.length; i < ln; i++) {\n        // Draws a dashed line when an point is in the way\n        lines = astrology.utils.getDashedLinesPositions(this.cx, this.cy, this.data.cusps[i] + this.shift, this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO, this.radius - (this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO + this.rulerRadius), this.pointRadius, this.locatedPoints);\n        lines.forEach(function (line) {\n          line = this.paper.line(line.startX, line.startY, line.endX, line.endY);\n          line.setAttribute(\"stroke\", astrology.LINE_COLOR);\n\n          if (mainAxis.indexOf(i) != -1) {\n            line.setAttribute(\"stroke-width\", astrology.SYMBOL_AXIS_STROKE * astrology.SYMBOL_SCALE);\n          } else {\n            line.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n          }\n\n          wrapper.appendChild(line);\n        }, this); // Cup number  \t\t \t\n\n        var deg360 = astrology.utils.radiansToDegree(2 * Math.PI);\n        var startOfCusp = this.data.cusps[i];\n        var endOfCusp = this.data.cusps[(i + 1) % 12];\n        var gap = endOfCusp - startOfCusp > 0 ? endOfCusp - startOfCusp : endOfCusp - startOfCusp + deg360;\n        var textPosition = astrology.utils.getPointPosition(this.cx, this.cy, numbersRadius, (startOfCusp + gap / 2) % deg360 + this.shift);\n        wrapper.appendChild(this.paper.getSymbol((i + 1).toString(), textPosition.x, textPosition.y));\n      }\n    };\n    /**\n     * Draw aspects\n     * @param{Array<Object> | null} customAspects - posible custom aspects to draw;\n     */\n\n\n    astrology.Radix.prototype.aspects = function (customAspects) {\n      var aspectsList = customAspects != null && Array.isArray(customAspects) ? customAspects : new astrology.AspectCalculator(this.toPoints).radix(this.data.planets);\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_ASPECTS);\n      var duplicateCheck = [];\n\n      for (var i = 0, ln = aspectsList.length; i < ln; i++) {\n        var key = aspectsList[i].aspect.name + \"-\" + aspectsList[i].point.name + \"-\" + aspectsList[i].toPoint.name;\n        var opositeKey = aspectsList[i].aspect.name + \"-\" + aspectsList[i].toPoint.name + \"-\" + aspectsList[i].point.name;\n\n        if (duplicateCheck.indexOf(opositeKey) == -1) {\n          duplicateCheck.push(key);\n          var startPoint = astrology.utils.getPointPosition(this.cx, this.cy, this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO, aspectsList[i].toPoint.position + this.shift);\n          var endPoint = astrology.utils.getPointPosition(this.cx, this.cy, this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO, aspectsList[i].point.position + this.shift);\n          var line = this.paper.line(startPoint.x, startPoint.y, endPoint.x, endPoint.y);\n          line.setAttribute(\"stroke\", astrology.STROKE_ONLY ? astrology.LINE_COLOR : aspectsList[i].aspect.color);\n          line.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n          line.setAttribute(\"data-name\", aspectsList[i].aspect.name);\n          line.setAttribute(\"data-degree\", aspectsList[i].aspect.degree);\n          line.setAttribute(\"data-point\", aspectsList[i].point.name);\n          line.setAttribute(\"data-toPoint\", aspectsList[i].toPoint.name);\n          line.setAttribute(\"data-precision\", aspectsList[i].precision);\n          wrapper.appendChild(line);\n        }\n      } // this\n\n\n      return context;\n    };\n    /**\n     * Add points of interest for aspects calculation\n     * @param {Obect} points, {\"As\":[0],\"Ic\":[90],\"Ds\":[180],\"Mc\":[270]} \n     * @see (astrology.AspectCalculator( toPoints) )\n     */\n\n\n    astrology.Radix.prototype.addPointsOfInterest = function (points) {\n      for (var point in this.points) {\n        this.toPoints[point] = points[point];\n      }\n\n      return context;\n    };\n\n    astrology.Radix.prototype.drawRuler = function drawRuler() {\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_RADIX + \"-\" + astrology.ID_RULER);\n      var startRadius = this.radius - (this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO + this.rulerRadius);\n      var rays = astrology.utils.getRulerPositions(this.cx, this.cy, startRadius, startRadius + this.rulerRadius, this.shift);\n      rays.forEach(function (ray) {\n        var line = this.paper.line(ray.startX, ray.startY, ray.endX, ray.endY);\n        line.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n        line.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n        wrapper.appendChild(line);\n      }, this);\n      var circle;\n      circle = this.paper.circle(this.cx, this.cy, startRadius);\n      circle.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n      circle.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      wrapper.appendChild(circle);\n    };\n    /**\n     * Draw circles\n     */\n\n\n    astrology.Radix.prototype.drawCircles = function drawCircles() {\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_RADIX + \"-\" + astrology.ID_CIRCLES);\n      var circle; //indoor circle\n\n      circle = this.paper.circle(this.cx, this.cy, this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO);\n      circle.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n      circle.setAttribute(\"stroke-width\", astrology.CIRCLE_STRONG * astrology.SYMBOL_SCALE);\n      wrapper.appendChild(circle); //outdoor circle\n\n      circle = this.paper.circle(this.cx, this.cy, this.radius);\n      circle.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n      circle.setAttribute(\"stroke-width\", astrology.CIRCLE_STRONG * astrology.SYMBOL_SCALE);\n      wrapper.appendChild(circle); //inner circle\n\n      circle = this.paper.circle(this.cx, this.cy, this.radius - this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO);\n      circle.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n      circle.setAttribute(\"stroke-width\", astrology.CIRCLE_STRONG * astrology.SYMBOL_SCALE);\n      wrapper.appendChild(circle);\n    };\n    /**\n     * Display transit horoscope\n     * \n     * @param {Object} data\n     * @example\n     *\t{\n     *\t\t\"planets\":{\"Moon\":[0], \"Sun\":[30],  ... },\n     *\t\t\"cusps\":[300, 340, 30, 60, 75, 90, 116, 172, 210, 236, 250, 274],\t*\t\t \n     *\t} \n     * \n     * @return {astrology.Transit} transit\n     */\n\n\n    astrology.Radix.prototype.transit = function (data) {\n      // remove axis (As, Ds, Mc, Ic) from radix\n      astrology.utils.getEmptyWrapper(this.universe, astrology._paperElementId + \"-\" + astrology.ID_RADIX + \"-\" + astrology.ID_AXIS);\n      var transit = new astrology.Transit(context, data);\n      transit.drawBg();\n      transit.drawPoints();\n      transit.drawCusps();\n      transit.drawRuler();\n      transit.drawCircles();\n      return transit;\n    };\n  })(window.astrology = window.astrology || {}); // ## Transit chart ###################################\n\n\n  (function (astrology) {\n    var context;\n    /**\n     * Transit charts.\n     * \n     * @class\n     * @public\n     * @constructor\n      * @param {astrology.Radix} radix \n     * @param {Object} data\n     */\n\n    astrology.Transit = function (radix, data) {\n      // Validate data\n      var status = astrology.utils.validate(data);\n\n      if (status.hasError) {\n        throw new Error(status.messages);\n      }\n\n      this.data = data;\n      this.paper = radix.paper;\n      this.cx = radix.cx;\n      this.cy = radix.cy;\n      this.toPoints = radix.toPoints;\n      this.radius = radix.radius;\n      this.rulerRadius = this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO / astrology.RULER_RADIUS;\n      this.pointRadius = this.radius + (this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO + astrology.PADDING * astrology.SYMBOL_SCALE);\n      this.shift = radix.shift;\n      this.universe = document.createElementNS(this.paper.root.namespaceURI, \"g\");\n      this.universe.setAttribute('id', this.paper.elementId + \"-\" + astrology.ID_TRANSIT);\n      this.paper.root.appendChild(this.universe);\n      context = this;\n      return this;\n    };\n    /**\n     * Draw background\n     */\n\n\n    astrology.Transit.prototype.drawBg = function () {\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_BG);\n      var LARGE_ARC_FLAG = 1;\n      var start = 0; //degree\n\n      var end = 359.99; //degree \t\t\t\t\n\n      var hemisphere = this.paper.segment(this.cx, this.cy, this.radius + this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO, start, end, this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO, LARGE_ARC_FLAG);\n      hemisphere.setAttribute(\"fill\", astrology.STROKE_ONLY ? \"none\" : astrology.COLOR_BACKGROUND);\n      wrapper.appendChild(hemisphere);\n    };\n    /**\n     * Draw planets\n     * \n     * @param{undefined | Object} planetsData, posible data planets to draw\n     */\n\n\n    astrology.Transit.prototype.drawPoints = function (planetsData) {\n      var planets = planetsData == null ? this.data.planets : planetsData;\n\n      if (planets == null) {\n        return;\n      }\n\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_TRANSIT + \"-\" + astrology.ID_POINTS);\n      var gap = this.radius - (this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO + this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO);\n      var step = (gap - 2 * (astrology.PADDING * astrology.SYMBOL_SCALE)) / Object.keys(planets).length;\n      var pointerRadius = this.radius + this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO;\n      var startPosition, endPosition;\n      this.locatedPoints = [];\n\n      for (var planet in planets) {\n        if (planets.hasOwnProperty(planet)) {\n          var position = astrology.utils.getPointPosition(this.cx, this.cy, this.pointRadius, planets[planet][0] + this.shift);\n          var point = {\n            name: planet,\n            x: position.x,\n            y: position.y,\n            r: astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE,\n            angle: planets[planet][0] + this.shift,\n            pointer: planets[planet][0] + this.shift\n          };\n          this.locatedPoints = astrology.utils.assemble(this.locatedPoints, point, {\n            cx: this.cx,\n            cy: this.cy,\n            r: this.pointRadius\n          });\n        }\n      }\n\n      if (astrology.DEBUG) console.log(\"Transit count of points: \" + this.locatedPoints.length);\n      if (astrology.DEBUG) console.log(\"Transit located points:\\n\" + JSON.stringify(this.locatedPoints));\n      this.locatedPoints.forEach(function (point) {\n        // draw pointer        \t\n        startPosition = astrology.utils.getPointPosition(this.cx, this.cy, pointerRadius, planets[point.name][0] + this.shift);\n        endPosition = astrology.utils.getPointPosition(this.cx, this.cy, pointerRadius + this.rulerRadius / 2, planets[point.name][0] + this.shift);\n        var pointer = this.paper.line(startPosition.x, startPosition.y, endPosition.x, endPosition.y);\n        pointer.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n        pointer.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n        wrapper.appendChild(pointer); // draw pointer line\n\n        if (!astrology.STROKE_ONLY && planets[point.name][0] + this.shift != point.angle) {\n          startPosition = endPosition;\n          endPosition = astrology.utils.getPointPosition(this.cx, this.cy, this.pointRadius - astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE, point.angle);\n          var line = this.paper.line(startPosition.x, startPosition.y, endPosition.x, endPosition.y);\n          line.setAttribute(\"stroke\", astrology.LINE_COLOR);\n          line.setAttribute(\"stroke-width\", 0.5 * (astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE));\n          wrapper.appendChild(line);\n        } // draw symbol\t\t\t\t\t\t\n\n\n        var symbol = this.paper.getSymbol(point.name, point.x, point.y);\n        symbol.setAttribute('id', astrology._paperElementId + \"-\" + astrology.ID_TRANSIT + \"-\" + astrology.ID_POINTS + \"-\" + point.name);\n        wrapper.appendChild(symbol); // draw point descriptions\n\n        var textsToShow = [(Math.round(planets[point.name][0]) % 30).toString()];\n        var zodiac = new astrology.Zodiac(this.data.cusps);\n\n        if (planets[point.name][1] && zodiac.isRetrograde(planets[point.name][1])) {\n          textsToShow.push(\"R\");\n        } else {\n          textsToShow.push(\"\");\n        }\n\n        textsToShow = textsToShow.concat(zodiac.getDignities({\n          \"name\": point.name,\n          \"position\": planets[point.name][0]\n        }, astrology.DIGNITIES_EXACT_EXALTATION_DEFAULT).join(\",\"));\n        var pointDescriptions = astrology.utils.getDescriptionPosition(point, textsToShow);\n        pointDescriptions.forEach(function (dsc) {\n          wrapper.appendChild(this.paper.text(dsc.text, dsc.x, dsc.y, astrology.POINTS_TEXT_SIZE, astrology.SIGNS_COLOR));\n        }, this);\n      }, this);\n    };\n    /**\n     * Draw circles\n     */\n\n\n    astrology.Transit.prototype.drawCircles = function drawCircles() {\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_TRANSIT + \"-\" + astrology.ID_CIRCLES);\n      var radius = this.radius + this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO;\n      var circle;\n      circle = this.paper.circle(this.cx, this.cy, radius);\n      circle.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n      circle.setAttribute(\"stroke-width\", astrology.CIRCLE_STRONG * astrology.SYMBOL_SCALE);\n      wrapper.appendChild(circle);\n    };\n    /**\n     * Draw cusps\n     * @param{undefined | Object} cuspsData, posible data cusps to draw\n     */\n\n\n    astrology.Transit.prototype.drawCusps = function (cuspsData) {\n      var cusps = cuspsData == null ? this.data.cusps : cuspsData;\n\n      if (cusps == null) {\n        return;\n      }\n\n      var startPosition, endPosition, lines, line;\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_TRANSIT + \"-\" + astrology.ID_CUSPS);\n      var numbersRadius = this.radius + (this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO - this.rulerRadius) / 2;\n      var AS = 0;\n      var IC = 3;\n      var DC = 6;\n      var MC = 9;\n      var mainAxis = [AS, IC, DC, MC]; //Cusps\n\n      for (var i = 0, ln = cusps.length; i < ln; i++) {\n        // Lines \t\t\t \t\t\t \t\t \t\t\n        var startPosition = astrology.utils.getPointPosition(this.cx, this.cy, this.radius, cusps[i] + this.shift);\n        var endPosition = astrology.utils.getPointPosition(this.cx, this.cy, this.radius + this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO - this.rulerRadius, cusps[i] + this.shift);\n        var line = this.paper.line(startPosition.x, startPosition.y, endPosition.x, endPosition.y);\n        line.setAttribute(\"stroke\", astrology.LINE_COLOR);\n        line.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n        wrapper.appendChild(line); // Cup number  \t\t \t\n\n        var deg360 = astrology.utils.radiansToDegree(2 * Math.PI);\n        var startOfCusp = cusps[i];\n        var endOfCusp = cusps[(i + 1) % 12];\n        var gap = endOfCusp - startOfCusp > 0 ? endOfCusp - startOfCusp : endOfCusp - startOfCusp + deg360;\n        var textPosition = astrology.utils.getPointPosition(this.cx, this.cy, numbersRadius, (startOfCusp + gap / 2) % deg360 + this.shift);\n        wrapper.appendChild(this.paper.getSymbol((i + 1).toString(), textPosition.x, textPosition.y));\n      }\n    };\n\n    astrology.Transit.prototype.drawRuler = function drawRuler() {\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_TRANSIT + \"-\" + astrology.ID_RULER);\n      var startRadius = this.radius + this.radius / astrology.INNER_CIRCLE_RADIUS_RATIO;\n      var rays = astrology.utils.getRulerPositions(this.cx, this.cy, startRadius, startRadius - this.rulerRadius, this.shift);\n      rays.forEach(function (ray) {\n        var line = this.paper.line(ray.startX, ray.startY, ray.endX, ray.endY);\n        line.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n        line.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n        wrapper.appendChild(line);\n      }, this);\n      var circle;\n      circle = this.paper.circle(this.cx, this.cy, startRadius - this.rulerRadius);\n      circle.setAttribute(\"stroke\", astrology.CIRCLE_COLOR);\n      circle.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n      wrapper.appendChild(circle);\n    };\n    /**\n     * Draw aspects\n     * @param{Array<Object> | null} customAspects - posible custom aspects to draw;\n     */\n\n\n    astrology.Transit.prototype.aspects = function (customAspects) {\n      var aspectsList = customAspects != null && Array.isArray(customAspects) ? customAspects : new astrology.AspectCalculator(this.toPoints).radix(this.data.planets);\n      var universe = this.universe;\n      var wrapper = astrology.utils.getEmptyWrapper(universe, astrology._paperElementId + \"-\" + astrology.ID_ASPECTS);\n\n      for (var i = 0, ln = aspectsList.length; i < ln; i++) {\n        var startPoint = astrology.utils.getPointPosition(this.cx, this.cy, this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO, aspectsList[i].toPoint.position + this.shift);\n        var endPoint = astrology.utils.getPointPosition(this.cx, this.cy, this.radius / astrology.INDOOR_CIRCLE_RADIUS_RATIO, aspectsList[i].point.position + this.shift);\n        var line = this.paper.line(startPoint.x, startPoint.y, endPoint.x, endPoint.y);\n        line.setAttribute(\"stroke\", astrology.STROKE_ONLY ? astrology.LINE_COLOR : aspectsList[i].aspect.color);\n        line.setAttribute(\"stroke-width\", astrology.CUSPS_STROKE * astrology.SYMBOL_SCALE);\n        line.setAttribute(\"data-name\", aspectsList[i].aspect.name);\n        line.setAttribute(\"data-degree\", aspectsList[i].aspect.degree);\n        line.setAttribute(\"data-point\", aspectsList[i].point.name);\n        line.setAttribute(\"data-toPoint\", aspectsList[i].toPoint.name);\n        line.setAttribute(\"data-precision\", aspectsList[i].precision);\n        wrapper.appendChild(line);\n      } // this\n\n\n      return context;\n    };\n    /**\n     * Moves points to another position.\n     * \n      * @param {Object} data - planets target positions.\n      * @param {Integer} duration - in seconds\n      * @param {boolean} isReverse \t  \t \n      * @param {Function | undefined} callbck - the function executed at the end of animation\n     */\n\n\n    astrology.Transit.prototype.animate = function (data, duration, isReverse, callback) {\n      // Validate data\n      var status = astrology.utils.validate(data);\n\n      if (status.hasError) {\n        throw new Error(status.messages);\n      } // remove aspects\n\n\n      astrology.utils.getEmptyWrapper(this.universe, astrology._paperElementId + \"-\" + astrology.ID_ASPECTS);\n      var animator = new astrology.Animator(context);\n      animator.animate(data, duration, isReverse, function () {\n        // animation is finished\n        this.data = data;\n        this.drawPoints();\n        this.drawCusps();\n        this.aspects();\n\n        if (typeof callback == 'function') {\n          callback();\n        }\n      }.bind(this)); // this\n\n      return context;\n    };\n  })(window.astrology = window.astrology || {}); // ## Transit chart ###################################\n\n\n  (function (astrology) {\n    var context;\n    /**\n     * Aspects calculator\n     * \n     * @class\n     * @public\n     * @constructor \t \n     * @param {Object} points; {\"Sun\":[0], \"Moon\":[90], \"Neptune\":[120], \"As\":[30]}\n     * @param {Object | null } settings\n     */\n\n    astrology.AspectCalculator = function (toPoints, settings) {\n      if (toPoints == null) {\n        throw new Error(\"Param 'toPoint' must not be empty.\");\n      }\n\n      this.settings = settings || {};\n      this.settings.aspects = settings && settings.aspects || astrology.ASPECTS;\n      this.toPoints = toPoints;\n      context = this;\n      return this;\n    };\n    /**\n     * Getter for this.toPoints\n     * @see constructor\n     * \n     * @return {Object} \n     */\n\n\n    astrology.AspectCalculator.prototype.getToPoints = function () {\n      return this[\"this\"].toPoints;\n    };\n    /**\n     * Radix aspects\n     * \n     * In radix calculation is the param \"points\" the same as param \"toPoints\" in constructor \n     * , but without special points such as: As,Ds, Mc, Ic, ...\n     * \n     * @param {Object} points; {\"Sun\":[0], \"Moon\":[90]}\n     * \n     * @return {Array<Object>} [{\"aspect\":{\"name\":\"conjunction\", \"degree\":120}\"\", \"point\":{\"name\":\"Sun\", \"position\":123}, \"toPoint\":{\"name\":\"Moon\", \"position\":345}, \"precision\":0.5}]]\n     */\n\n\n    astrology.AspectCalculator.prototype.radix = function (points) {\n      if (!points) {\n        return [];\n      }\n\n      var aspects = [];\n\n      for (var point in points) {\n        if (points.hasOwnProperty(point)) {\n          for (var toPoint in this.toPoints) {\n            if (this.toPoints.hasOwnProperty(toPoint)) {\n              if (point != toPoint) {\n                for (var aspect in this.settings.aspects) {\n                  if (hasAspect(points[point][0], this.toPoints[toPoint][0], this.settings.aspects[aspect])) {\n                    aspects.push({\n                      \"aspect\": {\n                        \"name\": aspect,\n                        \"degree\": this.settings.aspects[aspect].degree,\n                        \"orbit\": this.settings.aspects[aspect].orbit,\n                        \"color\": this.settings.aspects[aspect].color\n                      },\n                      \"point\": {\n                        \"name\": point,\n                        \"position\": points[point][0]\n                      },\n                      \"toPoint\": {\n                        \"name\": toPoint,\n                        \"position\": this.toPoints[toPoint][0]\n                      },\n                      \"precision\": calcPrecision(points[point][0], this.toPoints[toPoint][0], this.settings.aspects[aspect][\"degree\"]).toFixed(4)\n                    });\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return aspects.sort(compareAspectsByPrecision);\n    };\n    /**\n     * Transit aspects\n     *\n     * @param {Object} points - transiting points; {\"Sun\":[0, 1], \"Uranus\":[90, -1], \"NAME\":[ANGLE, SPEED]}; \n     * @return {Array<Object>} [{\"aspect\":{\"name\":\"conjunction\", \"degree\":120}\"\", \"point\":{\"name\":\"Sun\", \"position\":123}, \"toPoint\":{\"name\":\"Moon\", \"position\":345}, \"precision\":0.5}]]\n     */\n\n\n    astrology.AspectCalculator.prototype.transit = function (points) {\n      if (!points) {\n        return [];\n      }\n\n      var aspects = [];\n\n      for (var point in points) {\n        if (points.hasOwnProperty(point)) {\n          for (var toPoint in this.toPoints) {\n            if (this.toPoints.hasOwnProperty(toPoint)) {\n              for (var aspect in this.settings.aspects) {\n                if (hasAspect(points[point][0], this.toPoints[toPoint][0], this.settings.aspects[aspect])) {\n                  var precision = calcPrecision(points[point][0], this.toPoints[toPoint][0], this.settings.aspects[aspect][\"degree\"]); // -1 : is approaching to aspect\n                  // +1 : is moving away\n\n                  if (isTransitPointApproachingToAspect(this.settings.aspects[aspect][\"degree\"], this.toPoints[toPoint][0], points[point][0])) {\n                    precision *= -1;\n                  } // if transit has speed value && transit is retrograde\n\n\n                  if (points[point][1] && points[point][1] < 0) {\n                    precision *= -1;\n                  }\n\n                  aspects.push({\n                    \"aspect\": {\n                      \"name\": aspect,\n                      \"degree\": this.settings.aspects[aspect].degree,\n                      \"orbit\": this.settings.aspects[aspect].orbit,\n                      \"color\": this.settings.aspects[aspect].color\n                    },\n                    \"point\": {\n                      \"name\": point,\n                      \"position\": points[point][0]\n                    },\n                    \"toPoint\": {\n                      \"name\": toPoint,\n                      \"position\": this.toPoints[toPoint][0]\n                    },\n                    \"precision\": precision.toFixed(4)\n                  });\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return aspects.sort(compareAspectsByPrecision);\n    };\n    /*\n    * @private\n     * @param {double} point\n     * @param {double} toPoint\n     * @param {Array} aspects; [DEGREE, ORBIT]\n     */\n\n\n    function hasAspect(point, toPoint, aspect) {\n      var result = false;\n      var gap = Math.abs(point - toPoint);\n\n      if (gap > astrology.utils.radiansToDegree(Math.PI)) {\n        gap = astrology.utils.radiansToDegree(2 * Math.PI) - gap;\n      }\n\n      var orbitMin = aspect[\"degree\"] - aspect[\"orbit\"] / 2;\n      var orbitMax = aspect[\"degree\"] + aspect[\"orbit\"] / 2;\n\n      if (orbitMin <= gap && gap <= orbitMax) {\n        result = true;\n      }\n\n      return result;\n    }\n    /*\n    * @private \n     * @param {Object} pointAngle\n     * @param {Object} toPointAngle\n     * @param {double} aspectDegree;\n     */\n\n\n    function calcPrecision(point, toPoint, aspect) {\n      var gap = Math.abs(point - toPoint);\n\n      if (gap > astrology.utils.radiansToDegree(Math.PI)) {\n        gap = astrology.utils.radiansToDegree(2 * Math.PI) - gap;\n      }\n\n      return Math.abs(gap - aspect);\n    }\n    /*\n     * Calculate direction of aspect\n     * whether the transiting planet is approaching or is falling\n     * @private\n     * \n     * //TODO\n     * This method is tested, and for tests gives the right results. \n     * But the code is totally unclear. It needs to be rewritten.\n     * @param {double} aspect - aspect degree; for example 90.\t\n     * @param {double} toPoint - angle of standing point\n     * @param {double} point - angle of transiting planet\n     * @return {boolean}\n     */\n\n\n    function isTransitPointApproachingToAspect(aspect, toPoint, point) {\n      if (point - toPoint > 0) {\n        if (point - toPoint > astrology.utils.radiansToDegree(Math.PI)) {\n          point = (point + aspect) % astrology.utils.radiansToDegree(2 * Math.PI);\n        } else {\n          toPoint = (toPoint + aspect) % astrology.utils.radiansToDegree(2 * Math.PI);\n        }\n      } else {\n        if (toPoint - point > astrology.utils.radiansToDegree(Math.PI)) {\n          toPoint = (toPoint + aspect) % astrology.utils.radiansToDegree(2 * Math.PI);\n        } else {\n          point = (point + aspect) % astrology.utils.radiansToDegree(2 * Math.PI);\n        }\n      }\n\n      var _point = point;\n      var _toPoint = toPoint;\n      var difference = _point - _toPoint;\n\n      if (Math.abs(difference) > astrology.utils.radiansToDegree(Math.PI)) {\n        _point = toPoint;\n        _toPoint = point;\n      }\n\n      return _point - _toPoint < 0;\n    }\n    /*\n     * Aspects comparator\n     * by precision\n     * @private\n     * @param {Object} a \n     * @param {Object} b \n     */\n\n\n    function compareAspectsByPrecision(a, b) {\n      return a.precision - b.precision;\n    }\n  })(window.astrology = window.astrology || {}); // ## Zodiac ###################################\n\n\n  (function (astrology) {\n    // Zodiac\n    var SIGNS_ARIES = 1;\n    var SIGNS_TAURUS = 2;\n    var SIGNS_GEMINI = 3;\n    var SIGNS_CANCER = 4;\n    var SIGNS_LEO = 5;\n    var SIGNS_VIRGO = 6;\n    var SIGNS_LIBRA = 7;\n    var SIGNS_SCORPIO = 8;\n    var SIGNS_SAGITTARIUS = 9;\n    var SIGNS_CAPRICORN = 10;\n    var SIGNS_AQUARIUS = 11;\n    var SIGNS_PISCES = 12;\n    /**\n     * Zodiac\n     * \n     * Gives the position of points in the zodiac.\n     * Position of point in the zodiac.\n     * Position of point in houses.\n     * Dignities of planets.\n     * \n     * @class\n     * @public\n     * @constructor \t\n     * @param {Array} cusps - cusprs in zodiac; [296, 350, 30, 56, 75, 94, 116, 170, 210, 236, 255, 274]\n     * @param {Object | null } settings\n     */\n\n    astrology.Zodiac = function (cusps, settings) {\n      if (cusps == null) {\n        throw new Error(\"Param 'cusps' must not be empty.\");\n      }\n\n      if (!(Array.isArray(cusps) && cusps.length == 12)) {\n        throw new Error(\"Param 'cusps' is not 12 length Array.\");\n      }\n\n      this.cusps = cusps;\n      this.settings = settings || {};\n      return this;\n    };\n    /**\n     * Get astrological sign\n     * 1 - Arise, ... , 12 - Pisces\n     * \n     * @param {double} point - angle of point in circle\n     * @return { \\[1-9] | 1[0-2]\\ } \n     */\n\n\n    astrology.Zodiac.prototype.getSign = function (point) {\n      var angle = point % astrology.utils.radiansToDegree(2 * Math.PI);\n      return Math.floor(angle / 30 + 1);\n    };\n    /**\n     * Is retrograde\n     * \n      * @param {double} speed\n      * @return {boolean}\n     */\n\n\n    astrology.Zodiac.prototype.isRetrograde = function (speed) {\n      return speed < 0;\n    };\n    /**\n    * Get house number\n    * 1 - 12\n    * \n    * @param {double} point - angle of point in circle\n    * @return { \\[1-9] | 1[0-2]\\ }\n    */\n\n\n    astrology.Zodiac.prototype.getHouseNumber = function (point) {\n      var angle = point % astrology.utils.radiansToDegree(2 * Math.PI);\n\n      for (var i = 0, ln = this.cusps.length; i < ln; i++) {\n        if (angle >= this.cusps[i] && angle < this.cusps[i % (ln - 1) + 1]) {\n          return i + 1;\n        }\n      } // cusp passes over zero\n\n\n      for (var i = 0, ln = this.cusps.length; i < ln; i++) {\n        if (this.cusps[i] > this.cusps[i % (ln - 1) + 1]) {\n          return i + 1;\n        }\n      }\n\n      throw new Error(\"Oops, serious error in the method: 'astrology.Zodiac.getHouseNumber'.\");\n    };\n    /**\n     * Calculate dignities of planet\n     *   \n     * r - Rulership \n     * d - Detriment  \n     * e - Exaltation  \n     * E - Exalatation - Exact exaltation\n     * f - Fall \n     *  \n      * @param {Object} planet, { name:\"Sun\", position:60.2 }\n      * @param {Array<Object> | null } exactExaltation - list of named angles, [{ name:\"Sun\", position:278, orbit:2 }, { name:\"Moon\", position:3, , orbit:2 }]\n      * @return {Array<String>}\n     */\n\n\n    astrology.Zodiac.prototype.getDignities = function (planet, exactExaltation) {\n      if (!(planet && planet.name && planet.position != null)) {\n        return [];\n      }\n\n      var result = [];\n      var sign = this.getSign(planet.position);\n      var position = planet.position % astrology.utils.radiansToDegree(2 * Math.PI);\n\n      switch (planet.name) {\n        case astrology.SYMBOL_SUN:\n          if (sign == SIGNS_LEO) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_AQUARIUS) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_ARIES) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_VIRGO) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        case astrology.SYMBOL_MOON:\n          if (sign == SIGNS_CANCER) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_CAPRICORN) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_TAURUS) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_SCORPIO) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        case astrology.SYMBOL_MERCURY:\n          if (sign == SIGNS_GEMINI) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_SAGITTARIUS) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_VIRGO) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_PISCES) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        case astrology.SYMBOL_VENUS:\n          if (sign == SIGNS_TAURUS || sign == SIGNS_LIBRA) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_ARIES || sign == SIGNS_SCORPIO) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_PISCES) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_VIRGO) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        case astrology.SYMBOL_MARS:\n          if (sign == SIGNS_ARIES || sign == SIGNS_SCORPIO) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_TAURUS || sign == SIGNS_LIBRA) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_CAPRICORN) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_CANCER) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        case astrology.SYMBOL_JUPITER:\n          if (sign == SIGNS_SAGITTARIUS || sign == SIGNS_PISCES) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_GEMINI || sign == SIGNS_VIRGO) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_CANCER) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_CAPRICORN) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        case astrology.SYMBOL_SATURN:\n          if (sign == SIGNS_CAPRICORN || sign == SIGNS_AQUARIUS) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_CANCER || sign == SIGNS_LEO) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_LIBRA) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_ARIES) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        case astrology.SYMBOL_URANUS:\n          if (sign == SIGNS_AQUARIUS) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_LEO) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_SCORPIO) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_TAURUS) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        case astrology.SYMBOL_NEPTUNE:\n          if (sign == SIGNS_PISCES) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_VIRGO) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_LEO || sign == SIGNS_SAGITTARIUS) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_AQUARIUS || sign == SIGNS_GEMINI) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        case astrology.SYMBOL_PLUTO:\n          if (sign == SIGNS_SCORPIO) {\n            result.push(astrology.DIGNITIES_RULERSHIP);\n          } else if (sign == SIGNS_TAURUS) {\n            result.push(astrology.DIGNITIES_DETRIMENT);\n          }\n\n          if (sign == SIGNS_ARIES) {\n            result.push(astrology.DIGNITIES_EXALTATION);\n          } else if (sign == SIGNS_LIBRA) {\n            result.push(astrology.DIGNITIES_FALL);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      if (exactExaltation != null && Array.isArray(exactExaltation)) {\n        for (var i = 0, ln = exactExaltation.length; i < ln; i++) {\n          if (planet.name == exactExaltation[i].name) {\n            if (hasConjunction(planet.position, exactExaltation[i].position, exactExaltation[i].orbit)) {\n              result.push(astrology.DIGNITIES_EXACT_EXALTATION);\n            }\n          }\n        }\n      }\n\n      return result;\n    };\n    /*\n    * To hours:minutes:seconds\n    * @param {Double} d\n    * @return {String}\n    */\n\n\n    astrology.Zodiac.prototype.toDMS = function (d) {\n      d += 0.5 / 3600. / 10000.; // round to 1/1000 of a second\n\n      var deg = parseInt(d);\n      d = (d - deg) * 60;\n      var min = parseInt(d);\n      d = (d - min) * 60;\n      var sec = parseInt(d);\n      return deg + \"° \" + min + \"' \" + sec;\n    };\n    /*\n     * Has conjunction with point\n     * \n     * @private\n     * \n     * @param {Double} planetPosition\n      * @param {Double} poitPosition\n      * @param {Integer} orbit\n      * @return {boolean}\n     */\n\n\n    function hasConjunction(planetPosition, pointPosition, orbit) {\n      var result = false;\n      var minOrbit = pointPosition - orbit / 2 < 0 ? astrology.utils.radiansToDegree(2 * Math.PI) - (pointPosition - orbit / 2) : pointPosition - orbit / 2;\n      var maxOrbit = pointPosition + orbit / 2 >= astrology.utils.radiansToDegree(2 * Math.PI) ? pointPosition + orbit / 2 - astrology.utils.radiansToDegree(2 * Math.PI) : pointPosition + orbit / 2;\n\n      if (minOrbit > maxOrbit) {\n        //crossing over zero\n        if (minOrbit >= planetPosition && planetPosition <= minOrbit) {\n          result = true;\n        }\n      } else {\n        if (minOrbit <= planetPosition && planetPosition <= maxOrbit) {\n          result = true;\n        }\n      }\n\n      return result;\n    }\n\n    ;\n  })(window.astrology = window.astrology || {}); // ## Timer ###################################\n\n\n  (function (astrology) {\n    /**\n     * Timer\n     * \n     * Animation timer\n     * \n     * @class\n     * @public\n     * @constructor \t\n     */\n    astrology.Timer = function (callback) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\"param 'callback' has to be a function.\");\n      }\n\n      this.callback = callback;\n      this.boundTick_ = this.tick.bind(this);\n      return this;\n    };\n\n    astrology.Timer.prototype.start = function () {\n      if (!this.requestID_) {\n        this.lastGameLoopFrame = new Date().getTime();\n        this.tick();\n        if (astrology.DEBUG) console.log(\"[astrology.Timer] start\");\n      }\n    };\n\n    astrology.Timer.prototype.stop = function () {\n      if (this.requestID_) {\n        window.cancelAnimationFrame(this.requestID_);\n        this.requestID_ = undefined;\n        if (astrology.DEBUG) console.log(\"[astrology.Timer] stop\");\n      }\n    };\n\n    astrology.Timer.prototype.isRunning = function () {\n      return this.requestID_ ? true : false;\n    };\n\n    astrology.Timer.prototype.tick = function () {\n      var now = new Date().getTime();\n      this.requestID_ = window.requestAnimationFrame(this.boundTick_);\n      this.callback(now - this.lastGameLoopFrame);\n      this.lastGameLoopFrame = now;\n    };\n  })(window.astrology = window.astrology || {}); // ## Animator ###################################\n\n\n  (function (astrology) {\n    var context;\n    /**\n     * Transit chart animator\n     * \n     * Animates the object on a circle.\n     * \n     * @class\n     * @public\n     * @constructor \t\n     * @param {Object} from, {\"Sun\":[12], \"Moon\":[60]}\n     * @param {Object} to, {\"Sun\":[30], \"Moon\":[180]}\n     * @param {Object} settings, {cx:100, cy:100, radius:200, prefix:\"astro-chart-\"}\n     */\n\n    astrology.Animator = function (transit) {\n      this.transit = transit; // Copy data\n\n      this.actualPlanetPos = {};\n\n      for (var planet in this.transit.data.planets) {\n        this.actualPlanetPos[planet] = this.transit.data.planets[planet];\n      }\n\n      this.timer = new astrology.Timer(this.update.bind(this)); // time, passed since the start of the loop\n\n      this.timeSinceLoopStart = 0;\n      context = this;\n      return this;\n    };\n    /**\n     * Animate objects\n     \n     * @param {Object} data, targetPositions \n      * @param {Integer} duration - seconds\n      * @param {boolean} isReverse \n      * @param {Function} callbck - start et the end of animation\n     */\n\n\n    astrology.Animator.prototype.animate = function (data, duration, isReverse, callback) {\n      this.data = data;\n      this.duration = duration * 1000;\n      this.isReverse = isReverse || false;\n      this.callback = callback;\n      this.rotation = 0;\n      this.cuspsElement = document.getElementById(astrology._paperElementId + \"-\" + astrology.ID_TRANSIT + \"-\" + astrology.ID_CUSPS);\n      this.timer.start();\n    };\n\n    astrology.Animator.prototype.update = function (deltaTime) {\n      deltaTime = deltaTime || 1; //\t\t\t\t\t\t\t\t\t\n\n      this.timeSinceLoopStart += deltaTime;\n\n      if (this.timeSinceLoopStart >= this.duration) {\n        this.timer.stop();\n\n        if (typeof this.callback === \"function\") {\n          this.callback();\n        }\n\n        return;\n      }\n\n      var expectedNumberOfLoops = this.duration - this.timeSinceLoopStart < deltaTime ? 1 : Math.round((this.duration - this.timeSinceLoopStart) / deltaTime);\n      updatePlanets(expectedNumberOfLoops);\n      updateCusps(expectedNumberOfLoops);\n    };\n    /*\n     * @private\n     */\n\n\n    function updateCusps(expectedNumberOfLoops) {\n      var deg360 = astrology.utils.radiansToDegree(2 * Math.PI);\n      var targetCuspAngle = context.transit.data.cusps[0] - context.data.cusps[0];\n\n      if (targetCuspAngle < 0) {\n        targetCuspAngle += deg360;\n      } // speed\n\n\n      if (astrology.ANIMATION_CUSPS_ROTATION_SPEED > 0) {\n        targetCuspAngle += context.isReverse ? -1 * (astrology.ANIMATION_CUSPS_ROTATION_SPEED * deg360 + deg360) : astrology.ANIMATION_CUSPS_ROTATION_SPEED * deg360;\n      }\n\n      var difference = context.isReverse ? context.rotation - targetCuspAngle : targetCuspAngle - context.rotation; // zero crossing\n\n      if (difference < 0) {\n        difference += deg360;\n      }\n\n      var increment = difference / expectedNumberOfLoops;\n\n      if (context.isReverse) {\n        increment *= -1;\n      }\n\n      context.rotation += increment;\n      context.cuspsElement.setAttribute(\"transform\", \"rotate(\" + context.rotation + \" \" + context.transit.cx + \" \" + context.transit.cy + \")\");\n\n      if (expectedNumberOfLoops == 1) {\n        context.cuspsElement.removeAttribute(\"transform\");\n      }\n    }\n\n    ;\n    /*\n     * @private\n     */\n\n    function updatePlanets(expectedNumberOfLoops) {\n      for (var planet in context.data.planets) {\n        var actualPlanetAngle = context.actualPlanetPos[planet][0];\n        var targetPlanetAngle = context.data.planets[planet][0];\n        var isRetrograde = context.actualPlanetPos[planet][1] != null && context.actualPlanetPos[planet][1] < 0;\n        var difference;\n\n        if (context.isReverse && isRetrograde) {\n          difference = targetPlanetAngle - actualPlanetAngle;\n        } else if (context.isReverse || isRetrograde) {\n          difference = actualPlanetAngle - targetPlanetAngle;\n        } else {\n          difference = targetPlanetAngle - actualPlanetAngle;\n        } // zero crossing\n\n\n        if (difference < 0) {\n          difference += astrology.utils.radiansToDegree(2 * Math.PI);\n        }\n\n        var increment = difference / expectedNumberOfLoops;\n\n        if (context.isReverse) {\n          increment *= -1;\n        }\n\n        if (isRetrograde) {\n          increment *= -1;\n        }\n\n        var newPos = actualPlanetAngle + increment;\n\n        if (newPos < 0) {\n          newPos += astrology.utils.radiansToDegree(2 * Math.PI);\n        }\n\n        context.actualPlanetPos[planet][0] = newPos;\n      }\n\n      context.transit.drawPoints(context.actualPlanetPos);\n    }\n  })(window.astrology = window.astrology || {}); // ## UTILS #############################\n\n\n  (function (astrology) {\n    astrology.utils = {};\n    /**\n     * Calculate position of the point on the circle.\n     * \n     * @param {int} cx - center x \n     * @param {int} cy - center y\n     * @param {int} radius\n     * @param {double} angle - degree\t\t\t\n     * \n     * @return {Object} - {x:10, y:20}\n     */\n\n    astrology.utils.getPointPosition = function (cx, cy, radius, angle) {\n      var angleInRadius = (astrology.SHIFT_IN_DEGREES - angle) * Math.PI / 180;\n      var xPos = cx + radius * Math.cos(angleInRadius);\n      var yPos = cy + radius * Math.sin(angleInRadius);\n      return {\n        x: xPos,\n        y: yPos\n      };\n    };\n\n    astrology.utils.radiansToDegree = function (radians) {\n      return radians * 180 / Math.PI;\n    };\n    /**\n     * Calculates positions of the point description\n     * \n     * @param {Object} point\n     * @param {Array<String>} texts\n     * \n     * @return {Array<Object>} [{text:\"abc\", x:123, y:456}, {text:\"cvb\", x:456, y:852}, ...]\n     */\n\n\n    astrology.utils.getDescriptionPosition = function (point, texts) {\n      var RATION = 1.4;\n      var result = [];\n      var posX = point.x + astrology.COLLISION_RADIUS / RATION * astrology.SYMBOL_SCALE;\n      var posY = point.y - astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE;\n      texts.forEach(function (text, idx) {\n        result.push({\n          text: text,\n          x: posX,\n          y: posY + astrology.COLLISION_RADIUS / RATION * astrology.SYMBOL_SCALE * idx\n        });\n      }, this);\n      return result;\n    };\n    /**\n     * Checks a source data\n     * @private\n     * \n     * @param {Object} data\n     * @return {Object} status\n     */\n\n\n    astrology.utils.validate = function (data) {\n      var status = {\n        hasError: false,\n        messages: []\n      };\n\n      if (data == null) {\n        status.messages.push(\"Data is not set.\");\n        status.hasError = true;\n        return status;\n      }\n\n      if (data.planets == null) {\n        status.messages.push(\"There is not property 'planets'.\");\n        status.hasError = true;\n      }\n\n      for (var property in data.planets) {\n        if (data.planets.hasOwnProperty(property)) {\n          if (!Array.isArray(data.planets[property])) {\n            status.messages.push(\"The planets property '\" + property + \"' has to be Array.\");\n            status.hasError = true;\n          }\n        }\n      }\n\n      if (data.cusps != null && !Array.isArray(data.cusps)) {\n        status.messages.push(\"Property 'cusps' has to be Array.\");\n        status.hasError = true;\n      }\n\n      if (data.cusps != null && data.cusps.length != 12) {\n        status.messages.push(\"Count of 'cusps' values has to be 12.\");\n        status.hasError = true;\n      }\n\n      return status;\n    };\n    /**\n     * Get empty DOMElement with ID\n     * \n     * @param{String} elementID\n     * @param{DOMElement} parent\n     * @return {DOMElement}\n     */\n\n\n    astrology.utils.getEmptyWrapper = function (parent, elementID) {\n      var wrapper = document.getElementById(elementID);\n\n      if (wrapper) {\n        astrology.utils.removeChilds(wrapper);\n      } else {\n        wrapper = document.createElementNS(document.getElementById(astrology._paperElementId).namespaceURI, \"g\");\n        wrapper.setAttribute('id', elementID);\n        parent.appendChild(wrapper);\n      }\n\n      return wrapper;\n    };\n    /**\n    * Remove childs\n    * \n    * @param{DOMElement} parent\n    */\n\n\n    astrology.utils.removeChilds = function (parent) {\n      if (parent == null) {\n        return;\n      }\n\n      var last;\n\n      while (last = parent.lastChild) {\n        parent.removeChild(last);\n      }\n    };\n    /**\n     * Check circle collision between two objects \n     * \n      * @param {Object} circle1, {x:123, y:123, r:50}\n      * @param {Object} circle2, {x:456, y:456, r:60}\n      * @return {boolean} \t \n     */\n\n\n    astrology.utils.isCollision = function (circle1, circle2) {\n      //Calculate the vector between the circles’ center points\n      var vx = circle1.x - circle2.x;\n      var vy = circle1.y - circle2.y;\n      var magnitude = Math.sqrt(vx * vx + vy * vy); //circle.radius has been set to astrology.COLLISION_RADIUS;\n\n      var totalRadii = circle1.r + circle2.r;\n      return magnitude <= totalRadii;\n    };\n    /**\n     * Places a new point in the located list \n     * \n      * @param {Array<Object>} locatedPoints, [{name:\"Mars\", x:123, y:123, r:50, ephemeris:45.96}, {name:\"Sun\", x:1234, y:1234, r:50, ephemeris:100.96}]\n      * @param {Object} point, {name:\"Venus\", x:78, y:56, r:50, angle:15.96} \n      * @param {Object} universe - current universe\n      * @return {Array<Object>} locatedPoints \t \n     */\n\n\n    astrology.utils.assemble = function (locatedPoints, point, universe) {\n      // first item\n      if (locatedPoints.length == 0) {\n        locatedPoints.push(point);\n        return locatedPoints; //================>\n      }\n\n      if (2 * Math.PI * universe.r - 2 * (astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE) * (locatedPoints.length + 2) <= 0) {\n        if (astrology.DEBUG) console.log(\"Universe circumference: \" + 2 * Math.PI * universe.r + \", Planets circumference: \" + 2 * (astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE) * (locatedPoints.length + 2));\n        throw new Error(\"Unresolved planet collision. Try change SYMBOL_SCALE or paper size.\");\n      }\n\n      var isCollision = false;\n      locatedPoints.sort(astrology.utils.comparePoints);\n\n      for (var i = 0, ln = locatedPoints.length; i < ln; i++) {\n        if (astrology.utils.isCollision(locatedPoints[i], point)) {\n          isCollision = true;\n          var locatedButInCollisionPoint = locatedPoints[i];\n          locatedButInCollisionPoint.index = i;\n          if (astrology.DEBUG) console.log(\"Resolve collision: \" + locatedButInCollisionPoint.name + \" X \" + point.name);\n          break;\n        }\n      }\n\n      if (isCollision) {\n        astrology.utils.placePointsInCollision(locatedButInCollisionPoint, point);\n        var newPointPosition = astrology.utils.getPointPosition(universe.cx, universe.cy, universe.r, locatedButInCollisionPoint.angle);\n        locatedButInCollisionPoint.x = newPointPosition.x;\n        locatedButInCollisionPoint.y = newPointPosition.y;\n        newPointPosition = astrology.utils.getPointPosition(universe.cx, universe.cy, universe.r, point.angle);\n        point.x = newPointPosition.x;\n        point.y = newPointPosition.y; // remove locatedButInCollisionPoint from locatedPoints\t\t\t\t\t\t\t\t\t\n\n        locatedPoints.splice(locatedButInCollisionPoint.index, 1); // call recursive\t\n\n        locatedPoints = astrology.utils.assemble(locatedPoints, locatedButInCollisionPoint, universe);\n        locatedPoints = astrology.utils.assemble(locatedPoints, point, universe);\n      } else {\n        locatedPoints.push(point);\n      }\n\n      return locatedPoints;\n    };\n    /**\n     * Sets the positions of two points that are in collision.\n     * \n     * @param {Object} p1, {..., pointer:123, angle:456}\n     * @param {Object} p2, {..., pointer:23, angle:56}\n     */\n\n\n    astrology.utils.placePointsInCollision = function (p1, p2) {\n      var step = 1;\n\n      if ( // solving problems with zero crossing\t\t\t\t\t\t\t\t\t\t\n      p1.pointer <= p2.pointer && Math.abs(p1.pointer - p2.pointer) <= astrology.COLLISION_RADIUS || p1.pointer >= p2.pointer && Math.abs(p1.pointer - p2.pointer) >= astrology.COLLISION_RADIUS) {\n        p1.angle = p1.angle - step;\n        p2.angle = p2.angle + step;\n      } else {\n        p1.angle = p1.angle + step;\n        p2.angle = p2.angle - step;\n      }\n\n      p1.angle = (p1.angle + 360) % 360;\n      p2.angle = (p2.angle + 360) % 360;\n    };\n    /**\n     * Check collision between angle and object \n     * \n      * @param {double} angle\n      * @param {Array<Object>} points, [{x:456, y:456, r:60, angle:123}, ...]\n      * @return {boolean} \t \n     */\n\n\n    astrology.utils.isInCollision = function (angle, points) {\n      var deg360 = astrology.utils.radiansToDegree(2 * Math.PI);\n      var collisionRadius = astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE / 2;\n      var result = false;\n\n      for (var i = 0, ln = points.length; i < ln; i++) {\n        if (Math.abs(points[i].angle - angle) <= collisionRadius || deg360 - Math.abs(points[i].angle - angle) <= collisionRadius) {\n          result = true;\n          break;\n        }\n      }\n\n      return result;\n    };\n    /**\n     * Calculates positions of the dashed line passing through the obstacle.\n     * \t* \n     * @param {double} centerX\n     * @param {double} centerY\n     * @param {double} angle - line angle\n      * @param {double} lineStartRadius\n      * @param {double} lineEndRadius\n      * @param {double} obstacleRadius \t\n      * @param {Array<Object>} obstacles, [{x:456, y:456, r:60, angle:123}, ...]\n      * \n      * @return {Array<Object>} [{startX:1, startY:1, endX:4, endY:4}, {startX:6, startY:6, endX:8, endY:8}]\n     */\n\n\n    astrology.utils.getDashedLinesPositions = function (centerX, centerY, angle, lineStartRadius, lineEndRadius, obstacleRadius, obstacles) {\n      var startPos, endPos;\n      var result = [];\n\n      if (astrology.utils.isInCollision(angle, obstacles)) {\n        startPos = astrology.utils.getPointPosition(centerX, centerY, lineStartRadius, angle);\n        endPos = astrology.utils.getPointPosition(centerX, centerY, obstacleRadius - astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE, angle);\n        result.push({\n          startX: startPos.x,\n          startY: startPos.y,\n          endX: endPos.x,\n          endY: endPos.y\n        }); // the second part of the line when is space\n\n        if (obstacleRadius + 2 * (astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE) < lineEndRadius) {\n          startPos = astrology.utils.getPointPosition(centerX, centerY, obstacleRadius + 2 * (astrology.COLLISION_RADIUS * astrology.SYMBOL_SCALE), angle);\n          endPos = astrology.utils.getPointPosition(centerX, centerY, lineEndRadius, angle);\n          result.push({\n            startX: startPos.x,\n            startY: startPos.y,\n            endX: endPos.x,\n            endY: endPos.y\n          });\n        }\n      } else {\n        startPos = astrology.utils.getPointPosition(centerX, centerY, lineStartRadius, angle);\n        endPos = astrology.utils.getPointPosition(centerX, centerY, lineEndRadius, angle);\n        result.push({\n          startX: startPos.x,\n          startY: startPos.y,\n          endX: endPos.x,\n          endY: endPos.y\n        });\n      }\n\n      return result;\n    };\n    /**\n     * Calculate ruler positions.\n     * \n     * @param {Double} centerX\n     * @param {Double} centerY\n     * @param {Double} startRadius\n     * @param {Double} endRadius\n     * @param {Boolean} startAngle\n     * \n     * @return {Array<Object>} [ {startX:1,startY:2, endX:3, endX:4 }, ...]\n     */\n\n\n    astrology.utils.getRulerPositions = function (centerX, centerY, startRadius, endRadius, startAngle) {\n      var result = [];\n      var rayRadius = endRadius;\n      var halfRayRadius = startRadius <= endRadius ? rayRadius - Math.abs(endRadius - startRadius) / 2 : rayRadius + Math.abs(endRadius - startRadius) / 2;\n\n      for (var i = 0, start = 0, step = 5; i < 72; i++) {\n        var angle = start + startAngle;\n        var startPos = astrology.utils.getPointPosition(centerX, centerY, startRadius, angle);\n        var endPos = astrology.utils.getPointPosition(centerX, centerY, i % 2 == 0 ? rayRadius : halfRayRadius, angle);\n        result.push({\n          startX: startPos.x,\n          startY: startPos.y,\n          endX: endPos.x,\n          endY: endPos.y\n        });\n        start += step;\n      }\n\n      return result;\n    };\n    /**\n    * Compare two points\n    * \n    * @param {Object} pointA, {name:\"Venus\", x:78, y:56, r:50, angle:15.96}\n    * @param {Object} pointB, {name:\"Mercury\", x:78, y:56, r:50, angle:20.26}\n    * @return \n    */\n\n\n    astrology.utils.comparePoints = function (pointA, pointB) {\n      return pointA.angle - pointB.angle;\n    };\n  })(window.astrology = window.astrology || {});\n\n  var radix = new window.astrology.Chart('paper', 496, 496).radix(data);\n  radix.addPointsOfInterest({\n    \"As\": [data.cusps[0]],\n    \"Ic\": [data.cusps[3]],\n    \"Ds\": [data.cusps[6]],\n    \"Mc\": [data.cusps[9]]\n  });\n  radix.aspects();\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/build/astrochart.js\n");

/***/ })

});